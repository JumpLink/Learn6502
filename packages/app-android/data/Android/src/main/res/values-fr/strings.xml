<?xml version="1.0" encoding="utf-8"?>
<resources>
  <string name="_app_name_1k3Sbz">"Learn 6502 Assembly"</string>
  <string name="app_name">"Learn 6502 Assembly"</string>
  <string name="title_activity_kimera">"Learn 6502 Assembly"</string>
  <string name="_Debug_your_6502_assembly_code__step_through_your_program__and_view_memory_and_registers__To_get_started__assemble_and_run_your_program__ZBeIRp">"Déboguez votre code assembleur 6502, exécutez-le étape par étape et visualisez la mémoire et les registres. Pour commencer, assemblez et exécutez votre programme."</string>
  <string name="_The_last_subroutine___tt_spinWheels__tt___is_just_there_because_the_game_would_run_too_fast_otherwise__All__tt_spinWheels__tt__does_is_count__tt_X__tt__down_from_zero_until_it_hits_zero_again__The_first__tt_dex__tt__wraps__making__tt_X__tt___tt___ff__tt___1osJ5c">"The last subroutine, &lt;tt>spinWheels&lt;/tt>, is just there because the game would run too fast otherwise. All &lt;tt>spinWheels&lt;/tt> does is count &lt;tt>X&lt;/tt> down from zero until it hits zero again. The first &lt;tt>dex&lt;/tt> wraps, making &lt;tt>X&lt;/tt> &lt;tt>#$ff&lt;/tt>."</string>
  <string name="_Next_comes__tt_drawSnake__tt___This_is_pretty_simple_too___we_first_undraw_the_tail_and_then_draw_the_head___tt_X__tt__is_set_to_the_length_of_the_snake__so_we_can_index_to_the_right_pixel__and_we_set__tt_A__tt__to_zero_then_perform_the_write_using_the_indexed_indirect_addressing_mode__Then_we_reload__tt_X__tt__to_index_to_the_head__set__tt_A__tt__to_one_and_store_it_at__tt___10_x___tt____tt__10__tt__stores_the_two_byte_location_of_the_head__so_this_draws_a_white_pixel_at_the_current_head_position__As_only_the_head_and_the_tail_of_the_snake_move__this_is_enough_to_keep_the_snake_moving__12V3UP">"Next comes &lt;tt>drawSnake&lt;/tt>. This is pretty simple too - we first undraw the tail and then draw the head. &lt;tt>X&lt;/tt> is set to the length of the snake, so we can index to the right pixel, and we set &lt;tt>A&lt;/tt> to zero then perform the write using the indexed indirect addressing mode. Then we reload &lt;tt>X&lt;/tt> to index to the head, set &lt;tt>A&lt;/tt> to one and store it at &lt;tt>($10,x)&lt;/tt>. &lt;tt>$10&lt;/tt> stores the two-byte location of the head, so this draws a white pixel at the current head position. As only the head and the tail of the snake move, this is enough to keep the snake moving."</string>
  <string name="_Because_the_game_state_is_stored_in_terms_of_pixel_locations__rendering_the_game_is_very_straightforward__The_first_subroutine___tt_drawApple__tt___is_extremely_simple__It_sets__tt_Y__tt__to_zero__loads_a_random_colour_into_the_accumulator__then_stores_this_value_into__tt___00__y__tt____tt__00__tt__is_where_the_location_of_the_apple_is_stored__so__tt___00__y__tt__dereferences_to_this_memory_location__Read_the__Indirect_indexed__section_in__a_href___addressing__Addressing_modes__a__for_more_details__c02gF">"Because the game state is stored in terms of pixel locations, rendering the game is very straightforward. The first subroutine, &lt;tt>drawApple&lt;/tt>, is extremely simple. It sets &lt;tt>Y&lt;/tt> to zero, loads a random colour into the accumulator, then stores this value into &lt;tt>($00),y&lt;/tt>. &lt;tt>$00&lt;/tt> is where the location of the apple is stored, so &lt;tt>($00),y&lt;/tt> dereferences to this memory location. Read the \"Indirect indexed\" section in &lt;a href=\"#addressing\">Addressing modes&lt;/a> for more details."</string>
  <string name="_Rendering_the_game_1G5D7r">"Rendering the game"</string>
  <string name="_I_won_t_explain_in_depth_how_each_of_the_directions_work__but_the_above_explanation_should_give_you_enough_to_work_it_out_with_a_bit_of_study__1PDvzm">"I won\'t explain in depth how each of the directions work, but the above explanation should give you enough to work it out with a bit of study."</string>
  <string name="_After_a_move_in_each_direction__we_also_need_to_check_to_see_if_the_head_would_become_out_of_bounds__This_is_handled_differently_for_each_direction__For_left_and_right__we_can_check_to_see_if_the_head_has_effectively__wrapped_around___Going_right_from__tt__021f__tt__by_incrementing_the_least_significant_byte_would_lead_to__tt__0220__tt___but_this_is_actually_jumping_from_the_last_pixel_of_the_first_row_to_the_first_pixel_of_the_second_row__So__every_time_we_move_right__we_need_to_check_if_the_new_least_significant_byte_is_a_multiple_of__tt__20__tt___This_is_done_using_a_bit_check_against_the_mask__tt__1f__tt___Hopefully_the_illustration_below_will_show_you_how_masking_out_the_lowest_5_bits_reveals_whether_a_number_is_a_multiple_of__tt__20__tt__or_not__1FDzf4">"After a move in each direction, we also need to check to see if the head would become out of bounds. This is handled differently for each direction. For left and right, we can check to see if the head has effectively \"wrapped around\". Going right from &lt;tt>$021f&lt;/tt> by incrementing the least significant byte would lead to &lt;tt>$0220&lt;/tt>, but this is actually jumping from the last pixel of the first row to the first pixel of the second row. So, every time we move right, we need to check if the new least significant byte is a multiple of &lt;tt>$20&lt;/tt>. This is done using a bit check against the mask &lt;tt>$1f&lt;/tt>. Hopefully the illustration below will show you how masking out the lowest 5 bits reveals whether a number is a multiple of &lt;tt>$20&lt;/tt> or not."</string>
  <string name="_Going_between_sections_is_more_complicated__as_we_have_to_take_into_account_the_most_significant_byte_as_well__For_example__going_down_from__tt__02e1__tt__should_lead_to__tt__0301__tt___Luckily__this_is_fairly_easy_to_accomplish__Adding__tt__20__tt__to__tt__e1__tt__results_in__tt__01__tt__and_sets_the_carry_bit__If_the_carry_bit_was_set__we_know_we_also_need_to_increment_the_most_significant_byte__WNPdQ">"Going between sections is more complicated, as we have to take into account the most significant byte as well. For example, going down from &lt;tt>$02e1&lt;/tt> should lead to &lt;tt>$0301&lt;/tt>. Luckily, this is fairly easy to accomplish. Adding &lt;tt>$20&lt;/tt> to &lt;tt>$e1&lt;/tt> results in &lt;tt>$01&lt;/tt> and sets the carry bit. If the carry bit was set, we know we also need to increment the most significant byte."</string>
  <string name="_As_long_as_you_re_moving_within_one_of_these_horizontal_strips__things_are_simple__For_example__to_move_right__just_increment_the_least_significant_byte__e_g___tt__0200__tt__becomes__tt__0201__tt____To_go_down__add__tt__20__tt___e_g___tt__0200__tt__becomes__tt__0220__tt____Left_and_up_are_the_reverse__9ISvX">"As long as you\'re moving within one of these horizontal strips, things are simple. For example, to move right, just increment the least significant byte (e.g. &lt;tt>$0200&lt;/tt> becomes &lt;tt>$0201&lt;/tt>). To go down, add &lt;tt>$20&lt;/tt> (e.g. &lt;tt>$0200&lt;/tt> becomes &lt;tt>$0220&lt;/tt>). Left and up are the reverse."</string>
  <string name="_You_can_think_of_the_screen_as_four_horizontal_strips_of_32___8_pixels__These_strips_map_to__tt__0200__02ff__tt____tt__0300__03ff__tt____tt__0400__04ff__tt__and__tt__0500__05ff__tt___The_first_rows_of_pixels_are__tt__0200__021f__tt____tt__0220__023f__tt____tt__0240__025f__tt___etc__Z1miEzv">"You can think of the screen as four horizontal strips of 32 × 8 pixels. These strips map to &lt;tt>$0200-$02ff&lt;/tt>, &lt;tt>$0300-$03ff&lt;/tt>, &lt;tt>$0400-$04ff&lt;/tt> and &lt;tt>$0500-$05ff&lt;/tt>. The first rows of pixels are &lt;tt>$0200-$021f&lt;/tt>, &lt;tt>$0220-$023f&lt;/tt>, &lt;tt>$0240-$025f&lt;/tt>, etc."</string>
  <string name="_The_next_bit_updates_the_head_of_the_snake_depending_on_the_direction__This_is_probably_the_most_complicated_part_of_the_code__and_it_s_all_reliant_on_how_memory_locations_map_to_the_screen__so_let_s_look_at_that_in_more_detail__Z1buBFI">"The next bit updates the head of the snake depending on the direction. This is probably the most complicated part of the code, and it\'s all reliant on how memory locations map to the screen, so let\'s look at that in more detail."</string>
  <string name="_To_test_whether_the_direction_is__tt_1__tt____tt_2__tt____tt_4__tt__or__tt_8__tt___the_code_continually_shifts_right_until_the_carry_is_set__One__tt_LSR__tt__means__up___two_means__right___and_so_on__Z2aBNzL">"To test whether the direction is &lt;tt>1&lt;/tt>, &lt;tt>2&lt;/tt>, &lt;tt>4&lt;/tt> or &lt;tt>8&lt;/tt>, the code continually shifts right until the carry is set. One &lt;tt>LSR&lt;/tt> means \"up\", two means \"right\", and so on."</string>
  <string name="_Once_the_values_have_been_shifted_down_the_snake__we_have_to_work_out_what_to_do_with_the_head__The_direction_is_first_loaded_into__tt_A__tt____tt_LSR__tt__means__logical_shift_right___or__shift_all_the_bits_one_position_to_the_right___The_least_significant_bit_is_shifted_into_the_carry_flag__so_if_the_accumulator_is__tt_1__tt___after__tt_LSR__tt__it_is__tt_0__tt___with_the_carry_flag_set__tQ5Ll">"Once the values have been shifted down the snake, we have to work out what to do with the head. The direction is first loaded into &lt;tt>A&lt;/tt>. &lt;tt>LSR&lt;/tt> means \"logical shift right\", or \"shift all the bits one position to the right\". The least significant bit is shifted into the carry flag, so if the accumulator is &lt;tt>1&lt;/tt>, after &lt;tt>LSR&lt;/tt> it is &lt;tt>0&lt;/tt>, with the carry flag set."</string>
  <string name="_The_length_is_initialized_to__tt_4__tt___so__tt_X__tt__starts_off_as__tt_3__tt____tt_LDA__10_x__tt__loads_the_value_of__tt__13__tt__into__tt_A__tt___then__tt_STA__12_x__tt__stores_this_value_into__tt__15__tt____tt_X__tt__is_decremented__and_we_loop__Now__tt_X__tt__is__tt_2__tt___so_we_load__tt__12__tt__and_store_it_into__tt__14__tt___This_loops_while__tt_X__tt__is_positive___tt_BPL__tt__means__branch_if_positive____15f5pL">"The length is initialized to &lt;tt>4&lt;/tt>, so &lt;tt>X&lt;/tt> starts off as &lt;tt>3&lt;/tt>. &lt;tt>LDA $10,x&lt;/tt> loads the value of &lt;tt>$13&lt;/tt> into &lt;tt>A&lt;/tt>, then &lt;tt>STA $12,x&lt;/tt> stores this value into &lt;tt>$15&lt;/tt>. &lt;tt>X&lt;/tt> is decremented, and we loop. Now &lt;tt>X&lt;/tt> is &lt;tt>2&lt;/tt>, so we load &lt;tt>$12&lt;/tt> and store it into &lt;tt>$14&lt;/tt>. This loops while &lt;tt>X&lt;/tt> is positive (&lt;tt>BPL&lt;/tt> means \"branch if positive\")."</string>
  <string name="_At_a_low_level__this_subroutine_is_slightly_more_complex__First__the_length_is_loaded_into_the__tt_X__tt__register__which_is_then_decremented__The_snippet_below_shows_the_starting_memory_for_the_snake__1UKtQ3">"At a low level, this subroutine is slightly more complex. First, the length is loaded into the &lt;tt>X&lt;/tt> register, which is then decremented. The snippet below shows the starting memory for the snake."</string>
  <string name="_After_collision_detection__we_update_the_snake_s_location__This_is_done_at_a_high_level_like_so__First__move_each_byte_pair_of_the_body_up_one_position_in_memory__Second__update_the_head_according_to_the_current_direction__Finally__if_the_head_is_out_of_bounds__handle_it_as_a_collision__I_ll_illustrate_this_with_some_ascii_art__Each_pair_of_brackets_contains_an_x_y_coordinate_rather_than_a_pair_of_bytes_for_simplicity__1mMWEs">"After collision detection, we update the snake\'s location. This is done at a high level like so: First, move each byte pair of the body up one position in memory. Second, update the head according to the current direction. Finally, if the head is out of bounds, handle it as a collision. I\'ll illustrate this with some ascii art. Each pair of brackets contains an x,y coordinate rather than a pair of bytes for simplicity."</string>
  <string name="__tt_checkSnakeCollision__tt__loops_through_the_snake_s_body_segments__checking_each_byte_pair_against_the_head_pair__If_there_is_a_match__then_game_over__2lhmuJ">"&lt;tt>checkSnakeCollision&lt;/tt> loops through the snake\'s body segments, checking each byte pair against the head pair. If there is a match, then game over."</string>
  <string name="_The_next_subroutine___tt_checkCollision__tt___defers_to__tt_checkAppleCollision__tt__and__tt_checkSnakeCollision__tt____tt_checkAppleCollision__tt__just_checks_to_see_if_the_two_bytes_holding_the_location_of_the_apple_match_the_two_bytes_holding_the_location_of_the_head__If_they_do__the_length_is_increased_and_a_new_apple_position_is_generated__2af5u3">"The next subroutine, &lt;tt>checkCollision&lt;/tt>, defers to &lt;tt>checkAppleCollision&lt;/tt> and &lt;tt>checkSnakeCollision&lt;/tt>. &lt;tt>checkAppleCollision&lt;/tt> just checks to see if the two bytes holding the location of the apple match the two bytes holding the location of the head. If they do, the length is increased and a new apple position is generated."</string>
  <string name="_Updating_the_game_state_1H7cOH">"Updating the game state"</string>
  <string name="_So__looking_at__tt_upKey__tt___if_the_current_direction_is_down__4___the_bit_test_will_be_zero___tt_BNE__tt__means__branch_if_the_zero_flag_is_clear___so_in_this_case_we_ll_branch_to__tt_illegalMove__tt___which_just_returns_from_the_subroutine__Otherwise__the_new_direction__1_in_this_case__is_stored_in_the_appropriate_memory_location__1ixpMS">"So, looking at &lt;tt>upKey&lt;/tt>, if the current direction is down (4), the bit test will be zero. &lt;tt>BNE&lt;/tt> means \"branch if the zero flag is clear\", so in this case we\'ll branch to &lt;tt>illegalMove&lt;/tt>, which just returns from the subroutine. Otherwise, the new direction (1 in this case) is stored in the appropriate memory location."</string>
  <string name="_The__tt_BIT__tt__opcode_is_similar_to__tt_AND__tt___but_the_calculation_is_only_used_to_set_the_zero_flag___the_actual_result_is_discarded__The_zero_flag_is_set_only_if_the_result_of_AND_ing_the_accumulator_with_argument_is_zero__When_we_re_looking_at_powers_of_two__the_zero_flag_will_only_be_set_if_the_two_numbers_are_not_the_same__For_example___tt_0001_AND_0001__tt__is_not_zero__but__tt_0001_AND_0010__tt__is_zero__1yEj2e">"The &lt;tt>BIT&lt;/tt> opcode is similar to &lt;tt>AND&lt;/tt>, but the calculation is only used to set the zero flag - the actual result is discarded. The zero flag is set only if the result of AND-ing the accumulator with argument is zero. When we\'re looking at powers of two, the zero flag will only be set if the two numbers are not the same. For example, &lt;tt>0001 AND 0001&lt;/tt> is not zero, but &lt;tt>0001 AND 0010&lt;/tt> is zero."</string>
  <string name="_As_stated_before__the_four_directions_are_represented_internally_by_the_numbers_1__2__4_and_8__Each_of_these_numbers_is_a_power_of_2__thus_they_are_represented_by_a_binary_number_with_a_single__tt_1__tt___Z1HFz7b">"As stated before, the four directions are represented internally by the numbers 1, 2, 4 and 8. Each of these numbers is a power of 2, thus they are represented by a binary number with a single &lt;tt>1&lt;/tt>:"</string>
  <string name="_Each_section___tt_upKey__tt____tt_rightKey__tt___etc___first_checks_to_see_if_the_current_direction_is_the_opposite_of_the_new_direction__This_requires_another_little_detour__xCRxF">"Each section (&lt;tt>upKey&lt;/tt>, &lt;tt>rightKey&lt;/tt>, etc.) first checks to see if the current direction is the opposite of the new direction. This requires another little detour."</string>
  <string name="_Additional_button_inputs_are_also_available__button_A__Enter_Return_key__ASCII_code__tt__0D__tt___and_button_B__Space_key__ASCII_code__tt__20__tt____These_can_be_used_to_add_more_interaction_to_your_games__For_directional_controls__both_WASD_keys_and_arrow_keys_can_be_used_interchangeably__1R39Hg">"Additional button inputs are also available: button A (Enter/Return key, ASCII code &lt;tt>$0D&lt;/tt>) and button B (Space key, ASCII code &lt;tt>$20&lt;/tt>). These can be used to add more interaction to your games. For directional controls, both WASD keys and arrow keys can be used interchangeably."</string>
  <string name="_The_first_subroutine___tt_readKeys__tt___takes_the_job_of_accepting_user_input__The_memory_location__tt__ff__tt__holds_the_ascii_code_of_the_most_recent_key_press_in_this_simulator__The_value_is_loaded_into_the_accumulator__then_compared_to__tt__77__tt___the_hex_code_for_W____tt__64__tt___D____tt__73__tt___S__and__tt__61__tt___A___If_any_of_these_comparisons_are_successful__the_program_branches_to_the_appropriate_section__Z1i3fK9">"The first subroutine, &lt;tt>readKeys&lt;/tt>, takes the job of accepting user input. The memory location &lt;tt>$ff&lt;/tt> holds the ascii code of the most recent key press in this simulator. The value is loaded into the accumulator, then compared to &lt;tt>$77&lt;/tt> (the hex code for W), &lt;tt>$64&lt;/tt> (D), &lt;tt>$73&lt;/tt> (S) and &lt;tt>$61&lt;/tt> (A). If any of these comparisons are successful, the program branches to the appropriate section."</string>
  <string name="_Reading_the_input_SprBM">"Reading the input"</string>
  <string name="_Nearly_all_games_have_at_their_heart_a_game_loop__All_game_loops_have_the_same_basic_form__accept_user_input__update_the_game_state__and_render_the_game_state__This_loop_is_no_different__Z1HgbOy">"Nearly all games have at their heart a game loop. All game loops have the same basic form: accept user input, update the game state, and render the game state. This loop is no different."</string>
  <string name="_The_game_loop_Zzq7qT">"The game loop"</string>
  <string name="_The_result_of_this_subroutine_is_to_load_a_random_byte_into__tt__00__tt___and_a_random_number_between_2_and_5_into__tt__01__tt___Because_the_least_significant_byte_comes_first_with_indirect_addressing__this_translates_into_a_memory_address_between__tt__0200__tt__and__tt__05ff__tt___the_exact_range_used_to_draw_the_display__Z1uLCIm">"The result of this subroutine is to load a random byte into &lt;tt>$00&lt;/tt>, and a random number between 2 and 5 into &lt;tt>$01&lt;/tt>. Because the least significant byte comes first with indirect addressing, this translates into a memory address between &lt;tt>$0200&lt;/tt> and &lt;tt>$05ff&lt;/tt>: the exact range used to draw the display."</string>
  <string name="_After_this__the_value__tt_2__tt__is_added_to_the_accumulator__to_create_a_final_random_number_in_the_range_2_5__Zr1YTv">"After this, the value &lt;tt>2&lt;/tt> is added to the accumulator, to create a final random number in the range 2–5."</string>
  <string name="_The_effect_of_this_is_to_mask_out_the_least_significant_two_bits_of_the_accumulator__setting_the_others_to_zero__This_converts_a_number_in_the_range_of_0_255_to_a_number_in_the_range_of_0_3__Z1eHVja">"The effect of this is to mask out the least significant two bits of the accumulator, setting the others to zero. This converts a number in the range of 0–255 to a number in the range of 0–3."</string>
  <string name="_The_hex_value__tt__03__tt__is_represented_in_binary_as__tt_00000011__tt___The__tt_AND__tt__opcode_performs_a_bitwise_AND_of_the_argument_with_the_accumulator__For_example__if_the_accumulator_contains_the_binary_value__tt_10101010__tt___then_the_result_of__tt_AND__tt__with__tt_00000011__tt__will_be__tt_00000010__tt___10GFpK">"The hex value &lt;tt>$03&lt;/tt> is represented in binary as &lt;tt>00000011&lt;/tt>. The &lt;tt>AND&lt;/tt> opcode performs a bitwise AND of the argument with the accumulator. For example, if the accumulator contains the binary value &lt;tt>10101010&lt;/tt>, then the result of &lt;tt>AND&lt;/tt> with &lt;tt>00000011&lt;/tt> will be &lt;tt>00000010&lt;/tt>."</string>
  <string name="_The_next_subroutine___tt_generateApplePosition__tt___sets_the_apple_location_to_a_random_position_on_the_display__First__it_loads_a_random_byte_into_the_accumulator___tt__fe__tt__is_a_random_number_generator_in_this_simulator___This_is_stored_into__tt__00__tt___Next__a_different_random_byte_is_loaded_into_the_accumulator__which_is_then__tt_AND__tt__ed_with_the_value__tt__03__tt___This_part_requires_a_bit_of_a_detour__1WSyYq">"The next subroutine, &lt;tt>generateApplePosition&lt;/tt>, sets the apple location to a random position on the display. First, it loads a random byte into the accumulator (&lt;tt>$fe&lt;/tt> is a random number generator in this simulator). This is stored into &lt;tt>$00&lt;/tt>. Next, a different random byte is loaded into the accumulator, which is then &lt;tt>AND&lt;/tt>-ed with the value &lt;tt>$03&lt;/tt>. This part requires a bit of a detour."</string>
  <string name="_which_represents_the_indirectly_addressed_memory_locations__tt__0411__tt____tt__0410__tt__and__tt__040f__tt___three_pixels_in_the_middle_of_the_display___I_m_labouring_this_point__but_it_s_important_to_fully_grok_how_indirect_addressing_works__1Bk9KE">"which represents the indirectly-addressed memory locations &lt;tt>$0411&lt;/tt>, &lt;tt>$0410&lt;/tt> and &lt;tt>$040f&lt;/tt> (three pixels in the middle of the display). I\'m labouring this point, but it\'s important to fully grok how indirect addressing works."</string>
  <string name="_This_loads_the_value__tt__11__tt__into_the_memory_location__tt__10__tt___the_value__tt__10__tt__into__tt__12__tt___and__tt__0f__tt__into__tt__14__tt___It_then_loads_the_value__tt__04__tt__into__tt__11__tt____tt__13__tt__and__tt__15__tt___This_leads_to_memory_like_this__1IOPr0">"This loads the value &lt;tt>$11&lt;/tt> into the memory location &lt;tt>$10&lt;/tt>, the value &lt;tt>$10&lt;/tt> into &lt;tt>$12&lt;/tt>, and &lt;tt>$0f&lt;/tt> into &lt;tt>$14&lt;/tt>. It then loads the value &lt;tt>$04&lt;/tt> into &lt;tt>$11&lt;/tt>, &lt;tt>$13&lt;/tt> and &lt;tt>$15&lt;/tt>. This leads to memory like this:"</string>
  <string name="_The__tt_init__tt__subroutine_defers_to_two_subroutines___tt_initSnake__tt__and__tt_generateApplePosition__tt____tt_initSnake__tt__sets_the_snake_direction__length__and_then_loads_the_initial_memory_locations_of_the_snake_head_and_body__The_byte_pair_at__tt__10__tt__contains_the_screen_location_of_the_head__the_pair_at__tt__12__tt__contains_the_location_of_the_single_body_segment__and__tt__14__tt__contains_the_location_of_the_tail__the_tail_is_the_last_segment_of_the_body_and_is_drawn_in_black_to_keep_the_snake_moving___This_happens_in_the_following_code__kzjHF">"The &lt;tt>init&lt;/tt> subroutine defers to two subroutines, &lt;tt>initSnake&lt;/tt> and &lt;tt>generateApplePosition&lt;/tt>. &lt;tt>initSnake&lt;/tt> sets the snake direction, length, and then loads the initial memory locations of the snake head and body. The byte pair at &lt;tt>$10&lt;/tt> contains the screen location of the head, the pair at &lt;tt>$12&lt;/tt> contains the location of the single body segment, and &lt;tt>$14&lt;/tt> contains the location of the tail (the tail is the last segment of the body and is drawn in black to keep the snake moving). This happens in the following code:"</string>
  <string name="Initialization">"Initialization"</string>
  <string name="_Finally__byte__tt__03__tt__contains_the_current_length_of_the_snake__in_terms_of_bytes_in_memory__so_a_length_of_4_means_2_pixels___Z2l4973">"Finally, byte &lt;tt>$03&lt;/tt> contains the current length of the snake, in terms of bytes in memory (so a length of 4 means 2 pixels)."</string>
  <string name="_The_first_two_bytes_hold_the_location_of_the_apple__This_is_updated_every_time_the_snake_eats_the_apple__Byte__tt__02__tt__contains_the_current_direction___tt_1__tt__means_up___tt_2__tt__right___tt_4__tt__down__and__tt_8__tt__left__The_reasoning_behind_these_numbers_will_become_clear_later__j9eUk">"The first two bytes hold the location of the apple. This is updated every time the snake eats the apple. Byte &lt;tt>$02&lt;/tt> contains the current direction. &lt;tt>1&lt;/tt> means up, &lt;tt>2&lt;/tt> right, &lt;tt>4&lt;/tt> down, and &lt;tt>8&lt;/tt> left. The reasoning behind these numbers will become clear later."</string>
  <string name="_The_zero_page_of_memory_is_used_to_store_a_number_of_game_state_variables__as_noted_in_the_comment_block_at_the_top_of_the_game__Everything_in__tt__00__tt____tt__01__tt__and__tt__10__tt__upwards_is_a_pair_of_bytes_representing_a_two_byte_memory_location_that_will_be_looked_up_using_indirect_addressing__These_memory_locations_will_all_be_between__tt__0200__tt__and__tt__05ff__tt____the_section_of_memory_corresponding_to_the_game_console__For_example__if__tt__00__tt__and__tt__01__tt__contained_the_values__tt__01__tt__and__tt__02__tt___they_would_be_referring_to_the_second_pixel_of_the_display____tt__0201__tt____remember__the_least_significant_byte_comes_first_in_indirect_addressing___Z1Mxgue">"The zero page of memory is used to store a number of game state variables, as noted in the comment block at the top of the game. Everything in &lt;tt>$00&lt;/tt>, &lt;tt>$01&lt;/tt> and &lt;tt>$10&lt;/tt> upwards is a pair of bytes representing a two-byte memory location that will be looked up using indirect addressing. These memory locations will all be between &lt;tt>$0200&lt;/tt> and &lt;tt>$05ff&lt;/tt> - the section of memory corresponding to the game console. For example, if &lt;tt>$00&lt;/tt> and &lt;tt>$01&lt;/tt> contained the values &lt;tt>$01&lt;/tt> and &lt;tt>$02&lt;/tt>, they would be referring to the second pixel of the display ( &lt;tt>$0201&lt;/tt> - remember, the least significant byte comes first in indirect addressing)."</string>
  <string name="_Zero_page_usage_ZTjfXs">"Zero page usage"</string>
  <string name="_First___tt_readkeys__tt__checks_to_see_if_one_of_the_direction_keys__W__A__S__D__was_pressed__and_if_so__sets_the_direction_of_the_snake_accordingly__Then___tt_checkCollision__tt__checks_to_see_if_the_snake_collided_with_itself_or_the_apple___tt_updateSnake__tt__updates_the_internal_representation_of_the_snake__based_on_its_direction__Next__the_apple_and_snake_are_drawn__Finally___tt_spinWheels__tt__makes_the_processor_do_some_busy_work__to_stop_the_game_from_running_too_quickly__Think_of_it_like_a_sleep_command__The_game_keeps_running_until_the_snake_collides_with_the_wall_or_itself__zWng5">"First, &lt;tt>readkeys&lt;/tt> checks to see if one of the direction keys (W, A, S, D) was pressed, and if so, sets the direction of the snake accordingly. Then, &lt;tt>checkCollision&lt;/tt> checks to see if the snake collided with itself or the apple. &lt;tt>updateSnake&lt;/tt> updates the internal representation of the snake, based on its direction. Next, the apple and snake are drawn. Finally, &lt;tt>spinWheels&lt;/tt> makes the processor do some busy work, to stop the game from running too quickly. Think of it like a sleep command. The game keeps running until the snake collides with the wall or itself."</string>
  <string name="_The__tt_loop__tt__subroutine_itself_just_calls_a_number_of_subroutines_sequentially__before_looping_back_on_itself__ZlPKn1">"The &lt;tt>loop&lt;/tt> subroutine itself just calls a number of subroutines sequentially, before looping back on itself:"</string>
  <string name="__tt_init__tt__and__tt_loop__tt__are_both_subroutines___tt_init__tt__initializes_the_game_state__and__tt_loop__tt__is_the_main_game_loop__Z1xARaG">"&lt;tt>init&lt;/tt> and &lt;tt>loop&lt;/tt> are both subroutines. &lt;tt>init&lt;/tt> initializes the game state, and &lt;tt>loop&lt;/tt> is the main game loop."</string>
  <string name="_After_the_initial_block_of_comments__lines_starting_with_semicolons___the_first_two_lines_are__1vdOA4">"After the initial block of comments (lines starting with semicolons), the first two lines are:"</string>
  <string name="_Overall_structure_ZusHhC">"Overall structure"</string>
  <string name="__a_href__https___twitter_com_wkjagt__Willem_van_der_Jagt__a__made_a__a_href__https___gist_github_com_wkjagt_9043907__fully_annotated_gist_of_this_source_code__a___so_follow_along_with_that_for_more_details__Z1NzI9r">"&lt;a href=\"https://twitter.com/wkjagt\">Willem van der Jagt&lt;/a> made a &lt;a href=\"https://gist.github.com/wkjagt/9043907\">fully annotated gist of this source code&lt;/a>, so follow along with that for more details."</string>
  <string name="_The_code_block_below_contains_the_entire_source_code_of_the_game__I_ll_explain_how_it_works_in_the_following_sections__Zu8356">"The code block below contains the entire source code of the game. I\'ll explain how it works in the following sections."</string>
  <string name="_Here_s_an_example__Note_that_immediate_operands_are_still_prefixed_with_a__tt____tt___1sGb3O">"Here\'s an example. Note that immediate operands are still prefixed with a &lt;tt>#&lt;/tt>."</string>
  <string name="_In_this_assembler__we_can_define_descriptive_constants__or_symbols__that_represent_numbers__The_rest_of_the_code_can_then_simply_use_the_constants_instead_of_the_literal_number__which_immediately_makes_it_obvious_what_we_re_dealing_with__You_can_use_letters__digits_and_underscores_in_a_name__g40qd">"In this assembler, we can define descriptive constants (or symbols) that represent numbers. The rest of the code can then simply use the constants instead of the literal number, which immediately makes it obvious what we\'re dealing with. You can use letters, digits and underscores in a name."</string>
  <string name="_Even_though_this_will_be_a_simple_version__the_code_will_be_substantially_larger_than_all_the_previous_examples__We_will_need_to_keep_track_of_several_memory_locations_together_for_the_various_aspects_of_the_game__We_can_still_do_the_necessary_bookkeeping_throughout_the_program_ourselves__as_before__but_on_a_larger_scale_that_quickly_becomes_tedious_and_can_also_lead_to_bugs_that_are_difficult_to_spot__Instead_we_ll_now_let_the_assembler_do_some_of_the_mundane_work_for_us__2qh2nK">"Even though this will be a simple version, the code will be substantially larger than all the previous examples. We will need to keep track of several memory locations together for the various aspects of the game. We can still do the necessary bookkeeping throughout the program ourselves, as before, but on a larger scale that quickly becomes tedious and can also lead to bugs that are difficult to spot. Instead we\'ll now let the assembler do some of the mundane work for us."</string>
  <string name="_Now__let_s_put_all_this_knowledge_to_good_use__and_make_a_game__We_re_going_to_be_making_a_really_simple_version_of_the_classic_game__Snake___1oiFoS">"Now, let\'s put all this knowledge to good use, and make a game! We\'re going to be making a really simple version of the classic game \'Snake\'."</string>
  <string name="_Creating_a_game_Z2ijaAf">"Creating a game"</string>
  <string name="_The_first_instruction_causes_execution_to_jump_to_the__tt_init__tt__label__This_sets__tt_X__tt___then_returns_to_the_next_instruction___tt_JSR_loop__tt___This_jumps_to_the__tt_loop__tt__label__which_increments__tt_X__tt__until_it_is_equal_to__tt__05__tt___After_that_we_return_to_the_next_instruction___tt_JSR_end__tt___which_jumps_to_the_end_of_the_file__This_illustrates_how__tt_JSR__tt__and__tt_RTS__tt__can_be_used_together_to_create_modular_code__Z1EqroR">"The first instruction causes execution to jump to the &lt;tt>init&lt;/tt> label. This sets &lt;tt>X&lt;/tt>, then returns to the next instruction, &lt;tt>JSR loop&lt;/tt>. This jumps to the &lt;tt>loop&lt;/tt> label, which increments &lt;tt>X&lt;/tt> until it is equal to &lt;tt>$05&lt;/tt>. After that we return to the next instruction, &lt;tt>JSR end&lt;/tt>, which jumps to the end of the file. This illustrates how &lt;tt>JSR&lt;/tt> and &lt;tt>RTS&lt;/tt> can be used together to create modular code."</string>
  <string name="_The_processor_knows_where_to_return_to_because__tt_JSR__tt__pushes_the_address_minus_one_of_the_next_instruction_onto_the_stack_before_jumping_to_the_given_location___tt_RTS__tt__pops_this_location__adds_one_to_it__and_jumps_to_that_location__An_example__ZksJm6">"The processor knows where to return to because &lt;tt>JSR&lt;/tt> pushes the address minus one of the next instruction onto the stack before jumping to the given location. &lt;tt>RTS&lt;/tt> pops this location, adds one to it, and jumps to that location. An example:"</string>
  <string name="__tt_JSR__tt__and__tt_RTS__tt____jump_to_subroutine__and__return_from_subroutine___are_a_dynamic_duo_that_you_ll_usually_see_used_together___tt_JSR__tt__is_used_to_jump_from_the_current_location_to_another_part_of_the_code___tt_RTS__tt__returns_to_the_previous_position__This_is_basically_like_calling_a_function_and_returning__budLU">"&lt;tt>JSR&lt;/tt> and &lt;tt>RTS&lt;/tt> (\"jump to subroutine\" and \"return from subroutine\") are a dynamic duo that you\'ll usually see used together. &lt;tt>JSR&lt;/tt> is used to jump from the current location to another part of the code. &lt;tt>RTS&lt;/tt> returns to the previous position. This is basically like calling a function and returning."</string>
  <string name="_JSR_RTS_ZGEJDz">"JSR/RTS"</string>
  <string name="__tt_JMP__tt__is_an_unconditional_jump__Here_s_a_really_simple_example_to_show_it_in_action__220zvA">"&lt;tt>JMP&lt;/tt> is an unconditional jump. Here\'s a really simple example to show it in action:"</string>
  <string name="JMP">"JMP"</string>
  <string name="_Jumping_is_like_branching_with_two_main_differences__First__jumps_are_not_conditionally_executed__and_second__they_take_a_two_byte_absolute_address__For_small_programs__this_second_detail_isn_t_very_important__as_you_ll_mostly_be_using_labels__and_the_assembler_works_out_the_correct_memory_location_from_the_label__For_larger_programs_though__jumping_is_the_only_way_to_move_from_one_section_of_the_code_to_another__gahBA">"Jumping is like branching with two main differences. First, jumps are not conditionally executed, and second, they take a two-byte absolute address. For small programs, this second detail isn\'t very important, as you\'ll mostly be using labels, and the assembler works out the correct memory location from the label. For larger programs though, jumping is the only way to move from one section of the code to another."</string>
  <string name="Jumping">"Jumping"</string>
  <string name="__tt_X__tt__holds_the_pixel_colour__and__tt_Y__tt__holds_the_position_of_the_current_pixel__The_first_loop_draws_the_current_colour_as_a_pixel__via_the__tt_A__tt__register___pushes_the_colour_to_the_stack__then_increments_the_colour_and_position__The_second_loop_pops_the_stack__draws_the_popped_colour_as_a_pixel__then_increments_the_position__As_should_be_expected__this_creates_a_mirrored_pattern__ZSPLKf">"&lt;tt>X&lt;/tt> holds the pixel colour, and &lt;tt>Y&lt;/tt> holds the position of the current pixel. The first loop draws the current colour as a pixel (via the &lt;tt>A&lt;/tt> register), pushes the colour to the stack, then increments the colour and position. The second loop pops the stack, draws the popped colour as a pixel, then increments the position. As should be expected, this creates a mirrored pattern."</string>
  <string name="_Two_of_the_stack_instructions_are__tt_PHA__tt__and__tt_PLA__tt____push_accumulator__and__pull_accumulator___Below_is_an_example_of_these_two_in_action__Z1pQkxq">"Two of the stack instructions are &lt;tt>PHA&lt;/tt> and &lt;tt>PLA&lt;/tt>, \"push accumulator\" and \"pull accumulator\". Below is an example of these two in action."</string>
  <string name="_The_stack_in_a_6502_processor_is_just_like_any_other_stack___values_are_pushed_onto_it_and_popped___pulled__in_6502_parlance__off_it__The_current_depth_of_the_stack_is_measured_by_the_stack_pointer__a_special_register__The_stack_lives_in_memory_between__tt__0100__tt__and__tt__01ff__tt___The_stack_pointer_is_initially__tt__ff__tt___which_points_to_memory_location__tt__01ff__tt___When_a_byte_is_pushed_onto_the_stack__the_stack_pointer_becomes__tt__fe__tt___or_memory_location__tt__01fe__tt___and_so_on__ZVq7sO">"The stack in a 6502 processor is just like any other stack - values are pushed onto it and popped (\"pulled\" in 6502 parlance) off it. The current depth of the stack is measured by the stack pointer, a special register. The stack lives in memory between &lt;tt>$0100&lt;/tt> and &lt;tt>$01ff&lt;/tt>. The stack pointer is initially &lt;tt>$ff&lt;/tt>, which points to memory location &lt;tt>$01ff&lt;/tt>. When a byte is pushed onto the stack, the stack pointer becomes &lt;tt>$fe&lt;/tt>, or memory location &lt;tt>$01fe&lt;/tt>, and so on."</string>
  <string name="_The_stack_ZcdwJ1">"The stack"</string>
  <string name="_Try_to_write_code_snippets_that_use_each_of_the_6502_addressing_modes__Remember__you_can_use_the_monitor_in_the_debugger_to_watch_a_section_of_memory__2adgHf">"Try to write code snippets that use each of the 6502 addressing modes. Remember, you can use the monitor in the debugger to watch a section of memory."</string>
  <string name="Exercise">"Exercise"</string>
  <string name="_In_this_case___tt___01___tt__looks_up_the_two_bytes_at__tt__01__tt__and__tt__02__tt____tt__03__tt__and__tt__07__tt___These_form_the_address__tt__0703__tt___The_value_of_the__tt_Y__tt__register_is_added_to_this_address_to_give_the_final_address__tt__0704__tt___2bmnyL">"In this case, &lt;tt>($01)&lt;/tt> looks up the two bytes at &lt;tt>$01&lt;/tt> and &lt;tt>$02&lt;/tt>: &lt;tt>$03&lt;/tt> and &lt;tt>$07&lt;/tt>. These form the address &lt;tt>$0703&lt;/tt>. The value of the &lt;tt>Y&lt;/tt> register is added to this address to give the final address &lt;tt>$0704&lt;/tt>."</string>
  <string name="_Indirect_indexed_is_like_indexed_indirect_but_less_insane__Instead_of_adding_the__tt_X__tt__register_to_the_address__i_before__i__dereferencing__the_zero_page_address_is_dereferenced__and_the__tt_Y__tt__register_is_added_to_the_resulting_address__1JNMfd">"Indirect indexed is like indexed indirect but less insane. Instead of adding the &lt;tt>X&lt;/tt> register to the address &lt;i>before&lt;/i> dereferencing, the zero page address is dereferenced, and the &lt;tt>Y&lt;/tt> register is added to the resulting address."</string>
  <string name="_Indirect_indexed___tt___c0__Y__tt__2iHagU">"Indirect indexed: &lt;tt>($c0),Y&lt;/tt>"</string>
  <string name="_Memory_locations__tt__01__tt__and__tt__02__tt__contain_the_values__tt__05__tt__and__tt__07__tt__respectively__Think_of__tt___00_X___tt__as__tt___00___X___tt___In_this_case__tt_X__tt__is__tt__01__tt___so_this_simplifies_to__tt___01___tt___From_here_things_proceed_like_standard_indirect_addressing___the_two_bytes_at__tt__01__tt__and__tt__02__tt____tt__05__tt__and__tt__07__tt___are_looked_up_to_form_the_address__tt__0705__tt___This_is_the_address_that_the__tt_Y__tt__register_was_stored_into_in_the_previous_instruction__so_the__tt_A__tt__register_gets_the_same_value_as__tt_Y__tt___albeit_through_a_much_more_circuitous_route__You_won_t_see_this_much__2sCLPk">"Memory locations &lt;tt>$01&lt;/tt> and &lt;tt>$02&lt;/tt> contain the values &lt;tt>$05&lt;/tt> and &lt;tt>$07&lt;/tt> respectively. Think of &lt;tt>($00,X)&lt;/tt> as &lt;tt>($00 + X)&lt;/tt>. In this case &lt;tt>X&lt;/tt> is &lt;tt>$01&lt;/tt>, so this simplifies to &lt;tt>($01)&lt;/tt>. From here things proceed like standard indirect addressing - the two bytes at &lt;tt>$01&lt;/tt> and &lt;tt>$02&lt;/tt> (&lt;tt>$05&lt;/tt> and &lt;tt>$07&lt;/tt>) are looked up to form the address &lt;tt>$0705&lt;/tt>. This is the address that the &lt;tt>Y&lt;/tt> register was stored into in the previous instruction, so the &lt;tt>A&lt;/tt> register gets the same value as &lt;tt>Y&lt;/tt>, albeit through a much more circuitous route. You won\'t see this much."</string>
  <string name="_This_one_s_kinda_weird__It_s_like_a_cross_between_zero_page_X_and_indirect__Basically__you_take_the_zero_page_address__add_the_value_of_the__tt_X__tt__register_to_it__then_use_that_to_look_up_a_two_byte_address__For_example__1uXsJG">"This one\'s kinda weird. It\'s like a cross between zero page,X and indirect. Basically, you take the zero page address, add the value of the &lt;tt>X&lt;/tt> register to it, then use that to look up a two-byte address. For example:"</string>
  <string name="_Indexed_indirect___tt___c0_X___tt__ZoAJfM">"Indexed indirect: &lt;tt>($c0,X)&lt;/tt>"</string>
  <string name="_In_this_example___tt__f0__tt__contains_the_value__tt__01__tt__and__tt__f1__tt__contains_the_value__tt__cc__tt___The_instruction__tt_JMP___f0___tt__causes_the_processor_to_look_up_the_two_bytes_at__tt__f0__tt__and__tt__f1__tt____tt__01__tt__and__tt__cc__tt___and_put_them_together_to_form_the_address__tt__cc01__tt___which_becomes_the_new_program_counter__Assemble_and_step_through_the_program_above_to_see_what_happens__I_ll_talk_more_about__tt_JMP__tt__in_the_section_on__a_href___jumping__Jumping__a___16nYD2">"In this example, &lt;tt>$f0&lt;/tt> contains the value &lt;tt>$01&lt;/tt> and &lt;tt>$f1&lt;/tt> contains the value &lt;tt>$cc&lt;/tt>. The instruction &lt;tt>JMP ($f0)&lt;/tt> causes the processor to look up the two bytes at &lt;tt>$f0&lt;/tt> and &lt;tt>$f1&lt;/tt> (&lt;tt>$01&lt;/tt> and &lt;tt>$cc&lt;/tt>) and put them together to form the address &lt;tt>$cc01&lt;/tt>, which becomes the new program counter. Assemble and step through the program above to see what happens. I\'ll talk more about &lt;tt>JMP&lt;/tt> in the section on &lt;a href=\"#jumping\">Jumping&lt;/a>."</string>
  <string name="_Indirect_addressing_uses_an_absolute_address_to_look_up_another_address__The_first_address_gives_the_least_significant_byte_of_the_address__and_the_following_byte_gives_the_most_significant_byte__That_can_be_hard_to_wrap_your_head_around__so_here_s_an_example__Z2kYakf">"Indirect addressing uses an absolute address to look up another address. The first address gives the least significant byte of the address, and the following byte gives the most significant byte. That can be hard to wrap your head around, so here\'s an example:"</string>
  <string name="_Indirect___tt___c000___tt__1fNdE3">"Indirect: &lt;tt>($c000)&lt;/tt>"</string>
  <string name="_Some_instructions_don_t_deal_with_memory_locations__e_g___tt_INX__tt____increment_the__tt_X__tt__register___These_are_said_to_have_implicit_addressing___the_argument_is_implied_by_the_instruction__ZE5a5v">"Some instructions don\'t deal with memory locations (e.g. &lt;tt>INX&lt;/tt> - increment the &lt;tt>X&lt;/tt> register). These are said to have implicit addressing - the argument is implied by the instruction."</string>
  <string name="Implicit">"Implicit"</string>
  <string name="__tt_a9__tt__and__tt_c9__tt__are_the_processor_opcodes_for_immediate_addressed__tt_LDA__tt__and__tt_CMP__tt__respectively___tt_01__tt__and__tt_02__tt__are_the_arguments_to_these_instructions___tt_d0__tt__is_the_opcode_for__tt_BNE__tt___and_its_argument_is__tt_02__tt___This_means__skip_over_the_next_two_bytes____tt_85_22__tt___the_assembled_version_of__tt_STA__22__tt____Try_editing_the_code_so__tt_STA__tt__takes_a_two_byte_absolute_address_rather_than_a_single_byte_zero_page_address__e_g__change__tt_STA__22__tt__to__tt_STA__2222__tt____Reassemble_the_code_and_look_at_the_hexdump_again___the_argument_to__tt_BNE__tt__should_now_be__tt_03__tt___because_the_instruction_the_processor_is_skipping_past_is_now_three_bytes_long__ZkNEKa">"&lt;tt>a9&lt;/tt> and &lt;tt>c9&lt;/tt> are the processor opcodes for immediate-addressed &lt;tt>LDA&lt;/tt> and &lt;tt>CMP&lt;/tt> respectively. &lt;tt>01&lt;/tt> and &lt;tt>02&lt;/tt> are the arguments to these instructions. &lt;tt>d0&lt;/tt> is the opcode for &lt;tt>BNE&lt;/tt>, and its argument is &lt;tt>02&lt;/tt>. This means \"skip over the next two bytes\" (&lt;tt>85 22&lt;/tt>, the assembled version of &lt;tt>STA $22&lt;/tt>). Try editing the code so &lt;tt>STA&lt;/tt> takes a two-byte absolute address rather than a single-byte zero page address (e.g. change &lt;tt>STA $22&lt;/tt> to &lt;tt>STA $2222&lt;/tt>). Reassemble the code and look at the hexdump again - the argument to &lt;tt>BNE&lt;/tt> should now be &lt;tt>03&lt;/tt>, because the instruction the processor is skipping past is now three bytes long."</string>
  <string name="_The_hex_should_look_something_like_this__dVOFw">"The hex should look something like this:"</string>
  <string name="_Assemble_the_following_code__then_check_the_debugger_to_see_the_hexdump_of_the_assembled_code__ZQhThM">"Assemble the following code, then check the debugger to see the hexdump of the assembled code."</string>
  <string name="_Relative_addressing_is_used_for_branching_instructions__These_instructions_take_a_single_byte__which_is_used_as_an_offset_from_the_following_instruction__ZirGaK">"Relative addressing is used for branching instructions. These instructions take a single byte, which is used as an offset from the following instruction."</string>
  <string name="_Relative___tt__c0__tt___or_label__Z1fuyzp">"Relative: &lt;tt>$c0&lt;/tt> (or label)"</string>
  <string name="_Immediate_addressing_doesn_t_strictly_deal_with_memory_addresses___this_is_the_mode_where_actual_values_are_used__For_example___tt_LDX___01__tt__loads_the_value__tt__01__tt__into_the__tt_X__tt__register__This_is_very_different_to_the_zero_page_instruction__tt_LDX__01__tt__which_loads_the_value_at_memory_location__tt__01__tt__into_the__tt_X__tt__register__1Wlq49">"Immediate addressing doesn\'t strictly deal with memory addresses - this is the mode where actual values are used. For example, &lt;tt>LDX #$01&lt;/tt> loads the value &lt;tt>$01&lt;/tt> into the &lt;tt>X&lt;/tt> register. This is very different to the zero page instruction &lt;tt>LDX $01&lt;/tt> which loads the value at memory location &lt;tt>$01&lt;/tt> into the &lt;tt>X&lt;/tt> register."</string>
  <string name="_Immediate___tt___c0__tt__ZNtJ7a">"Immediate: &lt;tt>#$c0&lt;/tt>"</string>
  <string name="_Unlike_zero_page_Y__absolute_Y_can_t_be_used_with__tt_STX__tt__but_can_be_used_with__tt_LDA__tt__and__tt_STA__tt___150tMJ">"Unlike zero page,Y, absolute,Y can\'t be used with &lt;tt>STX&lt;/tt> but can be used with &lt;tt>LDA&lt;/tt> and &lt;tt>STA&lt;/tt>."</string>
  <string name="_These_are_the_absolute_addressing_versions_of_zero_page_X_and_zero_page_Y__For_example__Z1Qoxsw">"These are the absolute addressing versions of zero page,X and zero page,Y. For example:"</string>
  <string name="_Absolute_X_and_absolute_Y___tt__c000_X__tt__and__tt__c000_Y__tt__1nLeDg">"Absolute,X and absolute,Y: &lt;tt>$c000,X&lt;/tt> and &lt;tt>$c000,Y&lt;/tt>"</string>
  <string name="_This_is_the_equivalent_of_zero_page_X__but_can_only_be_used_with__tt_LDX__tt__and__tt_STX__tt___2hg8gp">"This is the equivalent of zero page,X, but can only be used with &lt;tt>LDX&lt;/tt> and &lt;tt>STX&lt;/tt>."</string>
  <string name="_Zero_page_Y___tt__c0_Y__tt__ZMkdzT">"Zero page,Y: &lt;tt>$c0,Y&lt;/tt>"</string>
  <string name="_If_the_result_of_the_addition_is_larger_than_a_single_byte__the_address_wraps_around__For_example__eoaFV">"If the result of the addition is larger than a single byte, the address wraps around. For example:"</string>
  <string name="_This_is_where_addressing_gets_interesting__In_this_mode__a_zero_page_address_is_given__and_then_the_value_of_the__tt_X__tt__register_is_added__Here_is_an_example__WPINk">"This is where addressing gets interesting. In this mode, a zero page address is given, and then the value of the &lt;tt>X&lt;/tt> register is added. Here is an example:"</string>
  <string name="_Zero_page_X___tt__c0_X__tt__Z2q8yG7">"Zero page,X: &lt;tt>$c0,X&lt;/tt>"</string>
  <string name="_All_instructions_that_support_absolute_addressing__with_the_exception_of_the_jump_instructions__also_have_the_option_to_take_a_single_byte_address__This_type_of_addressing_is_called__zero_page____only_the_first_page__the_first_256_bytes__of_memory_is_accessible__This_is_faster__as_only_one_byte_needs_to_be_looked_up__and_takes_up_less_space_in_the_assembled_code_as_well__29V56k">"All instructions that support absolute addressing (with the exception of the jump instructions) also have the option to take a single-byte address. This type of addressing is called \"zero page\" - only the first page (the first 256 bytes) of memory is accessible. This is faster, as only one byte needs to be looked up, and takes up less space in the assembled code as well."</string>
  <string name="_Zero_page___tt__c0__tt__ZjpTNX">"Zero page: &lt;tt>$c0&lt;/tt>"</string>
  <string name="_With_absolute_addressing__the_full_memory_location_is_used_as_the_argument_to_the_instruction__For_example__XFGyT">"With absolute addressing, the full memory location is used as the argument to the instruction. For example:"</string>
  <string name="_Absolute___tt__c000__tt__13v4PP">"Absolute: &lt;tt>$c000&lt;/tt>"</string>
  <string name="_With_all_these_examples_you_might_find_it_helpful_to_use_the_memory_monitor_in_the_debugger_to_watch_the_memory_change__The_monitor_takes_a_starting_memory_location_and_a_number_of_bytes_to_display_from_that_location__Both_of_these_are_hex_values__For_example__to_display_16_bytes_of_memory_from__tt__c000__tt___enter__tt_c000__tt__and__tt_10__tt__into__b_Start__b__and__b_Length__b___respectively__1f5dIX">"With all these examples you might find it helpful to use the memory monitor in the debugger to watch the memory change. The monitor takes a starting memory location and a number of bytes to display from that location. Both of these are hex values. For example, to display 16 bytes of memory from &lt;tt>$c000&lt;/tt>, enter &lt;tt>c000&lt;/tt> and &lt;tt>10&lt;/tt> into &lt;b>Start&lt;/b> and &lt;b>Length&lt;/b>, respectively."</string>
  <string name="_The_6502_uses_a_16_bit_address_bus__meaning_that_there_are_65536_bytes_of_memory_available_to_the_processor__Remember_that_a_byte_is_represented_by_two_hex_characters__so_the_memory_locations_are_generally_represented_as__tt__0000____ffff__tt___There_are_various_ways_to_refer_to_these_memory_locations__as_detailed_below__ZnJlF5">"The 6502 uses a 16-bit address bus, meaning that there are 65536 bytes of memory available to the processor. Remember that a byte is represented by two hex characters, so the memory locations are generally represented as &lt;tt>$0000 - $ffff&lt;/tt>. There are various ways to refer to these memory locations, as detailed below."</string>
  <string name="_Addressing_modes_2fSYBa">"Addressing modes"</string>
  <string name="__tt_BCC__tt__and__tt_BCS__tt____branch_on_carry_clear__and__branch_on_carry_set___are_used_to_branch_on_the_carry_flag__Write_a_program_that_uses_one_of_these_two__Z2bj482">"&lt;tt>BCC&lt;/tt> and &lt;tt>BCS&lt;/tt> (\"branch on carry clear\" and \"branch on carry set\") are used to branch on the carry flag. Write a program that uses one of these two."</string>
  <string name="_The_opposite_of__tt_BNE__tt__is__tt_BEQ__tt___Try_writing_a_program_that_uses__tt_BEQ__tt___cC0Rb">"The opposite of &lt;tt>BNE&lt;/tt> is &lt;tt>BEQ&lt;/tt>. Try writing a program that uses &lt;tt>BEQ&lt;/tt>."</string>
  <string name="_In_assembly_language__you_ll_usually_use_labels_with_branch_instructions__When_assembled_though__this_label_is_converted_to_a_single_byte_relative_offset__a_number_of_bytes_to_go_backwards_or_forwards_from_the_next_instruction__so_branch_instructions_can_only_go_forward_and_back_around_256_bytes__This_means_they_can_only_be_used_to_move_around_local_code__For_moving_further_you_ll_need_to_use_the_jumping_instructions__Z1bjthl">"In assembly language, you\'ll usually use labels with branch instructions. When assembled though, this label is converted to a single-byte relative offset (a number of bytes to go backwards or forwards from the next instruction) so branch instructions can only go forward and back around 256 bytes. This means they can only be used to move around local code. For moving further you\'ll need to use the jumping instructions."</string>
  <string name="_The_next_line___tt_BNE_decrement__tt___will_shift_execution_to_the_decrement_label_if_the__tt_Z__tt__flag_is_set_to__tt_0__tt___meaning_that_the_two_values_in_the__tt_CPX__tt__comparison_were_not_equal___otherwise_it_does_nothing_and_we_store__tt_X__tt__to__tt__0201__tt___then_finish_the_program__Z1SInwm">"The next line, &lt;tt>BNE decrement&lt;/tt>, will shift execution to the decrement label if the &lt;tt>Z&lt;/tt> flag is set to &lt;tt>0&lt;/tt> (meaning that the two values in the &lt;tt>CPX&lt;/tt> comparison were not equal), otherwise it does nothing and we store &lt;tt>X&lt;/tt> to &lt;tt>$0201&lt;/tt>, then finish the program."</string>
  <string name="_First_we_load_the_value__tt__08__tt__into_the__tt_X__tt__register__The_next_line_is_a_label__Labels_just_mark_certain_points_in_a_program_so_we_can_return_to_them_later__After_the_label_we_decrement__tt_X__tt___store_it_to__tt__0200__tt___the_top_left_pixel___and_then_compare_it_to_the_value__tt__03__tt____a_href__http___www_obelisk_me_uk_6502_reference_html_CPX___tt_CPX__tt___a__compares_the_value_in_the__tt_X__tt__register_with_another_value__If_the_two_values_are_equal__the__tt_Z__tt__flag_is_set_to__tt_1__tt___otherwise_it_is_set_to__tt_0__tt___Z2pQ3P1">"First we load the value &lt;tt>$08&lt;/tt> into the &lt;tt>X&lt;/tt> register. The next line is a label. Labels just mark certain points in a program so we can return to them later. After the label we decrement &lt;tt>X&lt;/tt>, store it to &lt;tt>$0200&lt;/tt> (the top-left pixel), and then compare it to the value &lt;tt>$03&lt;/tt>. &lt;a href=\"http://www.obelisk.me.uk/6502/reference.html#CPX\">&lt;tt>CPX&lt;/tt>&lt;/a> compares the value in the &lt;tt>X&lt;/tt> register with another value. If the two values are equal, the &lt;tt>Z&lt;/tt> flag is set to &lt;tt>1&lt;/tt>, otherwise it is set to &lt;tt>0&lt;/tt>."</string>
  <string name="_6502_assembly_language_has_a_bunch_of_branching_instructions__all_of_which_branch_based_on_whether_certain_flags_are_set_or_not__In_this_example_we_ll_be_looking_at__tt_BNE__tt____Branch_on_not_equal___Z1Tl2ng">"6502 assembly language has a bunch of branching instructions, all of which branch based on whether certain flags are set or not. In this example we\'ll be looking at &lt;tt>BNE&lt;/tt>: \"Branch on not equal\"."</string>
  <string name="_So_far_we_re_only_able_to_write_basic_programs_without_any_branching_logic__Let_s_change_that__OsuLF">"So far we\'re only able to write basic programs without any branching logic. Let\'s change that."</string>
  <string name="Branching">"Branching"</string>
  <string name="_The_opposite_of__tt_ADC__tt__is__tt_SBC__tt___subtract_with_carry___Write_a_program_that_uses_this_instruction__1r5tl3">"The opposite of &lt;tt>ADC&lt;/tt> is &lt;tt>SBC&lt;/tt> (subtract with carry). Write a program that uses this instruction."</string>
  <string name="_Rewrite_the_first_example_in_this_section_to_use_the__tt_Y__tt__register_instead_of_the__tt_X__tt__register__Z28lR1Q">"Rewrite the first example in this section to use the &lt;tt>Y&lt;/tt> register instead of the &lt;tt>X&lt;/tt> register."</string>
  <string name="_You_ve_seen__tt_TAX__tt___You_can_probably_guess_what__tt_TAY__tt____tt_TXA__tt__and__tt_TYA__tt__do__but_write_some_code_to_test_your_assumptions__ZqpjT1">"You\'ve seen &lt;tt>TAX&lt;/tt>. You can probably guess what &lt;tt>TAY&lt;/tt>, &lt;tt>TXA&lt;/tt> and &lt;tt>TYA&lt;/tt> do, but write some code to test your assumptions."</string>
  <string name="_A_full_list_of_the_6502_instruction_set_is__a_href__http___www_6502_org_tutorials_6502opcodes_html__available_here__a__and__a_href__http___www_obelisk_me_uk_6502_reference_html__here__a___I_usually_refer_to_both_pages_as_they_have_their_strengths_and_weaknesses___These_pages_detail_the_arguments_to_each_instruction__which_registers_they_use__and_which_flags_they_set__They_are_your_bible__Z1EmWkL">"A full list of the 6502 instruction set is &lt;a href=\"http://www.6502.org/tutorials/6502opcodes.html\">available here&lt;/a> and &lt;a href=\"http://www.obelisk.me.uk/6502/reference.html\">here&lt;/a> (I usually refer to both pages as they have their strengths and weaknesses). These pages detail the arguments to each instruction, which registers they use, and which flags they set. They are your bible."</string>
  <string name="_Assemble_the_code_and_select__b_Step__b__from_the_Run_button_s_dropdown_menu_to_step_through_these_three_instructions__The_monitor_in_the_debugger_shows_a_section_of_memory__and_can_be_helpful_to_visualise_the_execution_of_programs___tt_STA__01__tt__stores_the_value_of_the__tt_A__tt__register_at_memory_location__tt__01__tt___and__tt_ADC__01__tt__adds_the_value_stored_at_the_memory_location__tt__01__tt__to_the__tt_A__tt__register___tt__80____80__tt__should_equal__tt__100__tt___but_because_this_is_bigger_than_a_byte__the__tt_A__tt__register_is_set_to__tt__00__tt__and_the_carry_flag_is_set__As_well_as_this_though__the_zero_flag_is_set__The_zero_flag_is_set_by_all_instructions_where_the_result_is_zero__1WvSg6">"Assemble the code and select &lt;b>Step&lt;/b> from the Run button\'s dropdown menu to step through these three instructions. The monitor in the debugger shows a section of memory, and can be helpful to visualise the execution of programs. &lt;tt>STA $01&lt;/tt> stores the value of the &lt;tt>A&lt;/tt> register at memory location &lt;tt>$01&lt;/tt>, and &lt;tt>ADC $01&lt;/tt> adds the value stored at the memory location &lt;tt>$01&lt;/tt> to the &lt;tt>A&lt;/tt> register. &lt;tt>$80 + $80&lt;/tt> should equal &lt;tt>$100&lt;/tt>, but because this is bigger than a byte, the &lt;tt>A&lt;/tt> register is set to &lt;tt>$00&lt;/tt> and the carry flag is set. As well as this though, the zero flag is set. The zero flag is set by all instructions where the result is zero."</string>
  <string name="_An_important_thing_to_notice_here_is_the_distinction_between__tt_ADC___01__tt__and__tt_ADC__01__tt___The_first_one_adds_the_value__tt__01__tt__to_the__tt_A__tt__register__but_the_second_adds_the_value_stored_at_memory_location__tt__01__tt__to_the__tt_A__tt__register__Z2awwXN">"An important thing to notice here is the distinction between &lt;tt>ADC #$01&lt;/tt> and &lt;tt>ADC $01&lt;/tt>. The first one adds the value &lt;tt>$01&lt;/tt> to the &lt;tt>A&lt;/tt> register, but the second adds the value stored at memory location &lt;tt>$01&lt;/tt> to the &lt;tt>A&lt;/tt> register."</string>
  <string name="_In_the_simulator_below__b_type__b___don_t_paste__the_following_code__2ucm1O">"In the simulator below &lt;b>type&lt;/b> (don\'t paste) the following code:"</string>
  <string name="_The_problem_is___tt__184__tt__is_too_big_to_fit_in_a_single_byte__the_max_is__tt__FF__tt____and_the_registers_can_only_hold_a_single_byte__It_s_OK_though__the_processor_isn_t_actually_dumb__If_you_were_looking_carefully_enough__you_ll_have_noticed_that_the_carry_flag_was_set_to__tt_1__tt__after_this_operation__So_that_s_how_you_know__2saSRK">"The problem is, &lt;tt>$184&lt;/tt> is too big to fit in a single byte (the max is &lt;tt>$FF&lt;/tt>), and the registers can only hold a single byte. It\'s OK though; the processor isn\'t actually dumb. If you were looking carefully enough, you\'ll have noticed that the carry flag was set to &lt;tt>1&lt;/tt> after this operation. So that\'s how you know."</string>
  <string name="_Assemble_the_code__then_turn_on_the_debugger_and_step_through_the_code__watching_the__tt_A__tt__and__tt_X__tt__registers__Something_slightly_odd_happens_on_the_line__tt_ADC___c4__tt___You_might_expect_that_adding__tt__c4__tt__to__tt__c0__tt__would_give__tt__184__tt___but_this_processor_gives_the_result_as__tt__84__tt___What_s_up_with_that__Zcxm19">"Assemble the code, then turn on the debugger and step through the code, watching the &lt;tt>A&lt;/tt> and &lt;tt>X&lt;/tt> registers. Something slightly odd happens on the line &lt;tt>ADC #$c4&lt;/tt>. You might expect that adding &lt;tt>$c4&lt;/tt> to &lt;tt>$c0&lt;/tt> would give &lt;tt>$184&lt;/tt>, but this processor gives the result as &lt;tt>$84&lt;/tt>. What\'s up with that?"</string>
  <string name="_Instructions_in_assembly_language_are_like_a_small_set_of_predefined_functions__All_instructions_take_zero_or_one_arguments__Here_s_some_annotated_source_code_to_introduce_a_few_different_instructions__kX8bO">"Instructions in assembly language are like a small set of predefined functions. All instructions take zero or one arguments. Here\'s some annotated source code to introduce a few different instructions:"</string>
  <string name="Instructions">"Instructions"</string>
  <string name="_The_last_section_shows_the_processor_flags__Each_flag_is_one_bit__so_all_seven_flags_live_in_a_single_byte__The_flags_are_set_by_the_processor_to_give_information_about_the_previous_instruction__More_on_that_later___a_href__https___web_archive_org_web_20210626024532_http___www_obelisk_me_uk_6502_registers_html__Read_more_about_the_registers_and_flags_here__a___uAwU">"The last section shows the processor flags. Each flag is one bit, so all seven flags live in a single byte. The flags are set by the processor to give information about the previous instruction. More on that later. &lt;a href=\"https://web.archive.org/web/20210626024532/http://www.obelisk.me.uk/6502/registers.html\">Read more about the registers and flags here&lt;/a>."</string>
  <string name="__tt_PC__tt__is_the_program_counter___it_s_how_the_processor_knows_at_what_point_in_the_program_it_currently_is__It_s_like_the_current_line_number_of_an_executing_script__In_the_JavaScript_simulator_the_code_is_assembled_starting_at_memory_location__tt__0600__tt___so__tt_PC__tt__always_starts_there__oPmxJ">"&lt;tt>PC&lt;/tt> is the program counter - it\'s how the processor knows at what point in the program it currently is. It\'s like the current line number of an executing script. In the JavaScript simulator the code is assembled starting at memory location &lt;tt>$0600&lt;/tt>, so &lt;tt>PC&lt;/tt> always starts there."</string>
  <string name="__tt_SP__tt__is_the_stack_pointer__I_won_t_get_into_the_stack_yet__but_basically_this_register_is_decremented_every_time_a_byte_is_pushed_onto_the_stack__and_incremented_when_a_byte_is_popped_off_the_stack__1P8VCj">"&lt;tt>SP&lt;/tt> is the stack pointer. I won\'t get into the stack yet, but basically this register is decremented every time a byte is pushed onto the stack, and incremented when a byte is popped off the stack."</string>
  <string name="_The_first_line_shows_the__tt_A__tt____tt_X__tt__and__tt_Y__tt__registers___tt_A__tt__is_often_called_the__accumulator____Each_register_holds_a_single_byte__Most_operations_work_on_the_contents_of_these_registers__Z1fihXI">"The first line shows the &lt;tt>A&lt;/tt>, &lt;tt>X&lt;/tt> and &lt;tt>Y&lt;/tt> registers (&lt;tt>A&lt;/tt> is often called the \"accumulator\"). Each register holds a single byte. Most operations work on the contents of these registers."</string>
  <string name="_We_ve_already_had_a_little_look_at_the_processor_status_section__the_bit_with__tt_A__tt____tt_PC__tt__etc____but_what_does_it_all_mean__ZAb5dg">"We\'ve already had a little look at the processor status section (the bit with &lt;tt>A&lt;/tt>, &lt;tt>PC&lt;/tt> etc.), but what does it all mean?"</string>
  <string name="_Registers_and_flags_Z17U9IF">"Registers and flags"</string>
  <string name="_Add_more_instructions_to_draw_extra_pixels__Z18Dkj2">"Add more instructions to draw extra pixels."</string>
  <string name="_3__qF">"3."</string>
  <string name="_Change_one_of_the_pixels_to_draw_at_the_bottom_right_corner__memory_location__tt__05ff__tt____ZsfGeN">"Change one of the pixels to draw at the bottom-right corner (memory location &lt;tt>$05ff&lt;/tt>)."</string>
  <string name="_2__qa">"2."</string>
  <string name="_Try_changing_the_colour_of_the_three_pixels__1lqaSi">"Try changing the colour of the three pixels."</string>
  <string name="_1__pE">"1."</string>
  <string name="Exercises">"Exercises"</string>
  <string name="_So__the_instruction__tt_STA__0200__tt__stores_the_value_of_the__tt_A__tt__register_to_memory_location__tt__0200__tt___Click__b_Step__b__four_more_times_to_execute_the_rest_of_the_instructions__keeping_an_eye_on_the__tt_A__tt__register_as_it_changes__Z1LM2U7">"So, the instruction &lt;tt>STA $0200&lt;/tt> stores the value of the &lt;tt>A&lt;/tt> register to memory location &lt;tt>$0200&lt;/tt>. Click &lt;b>Step&lt;/b> four more times to execute the rest of the instructions, keeping an eye on the &lt;tt>A&lt;/tt> register as it changes."</string>
  <string name="_Press__b_Step__b__again_to_execute_the_second_instruction__The_top_left_pixel_of_the_game_console_should_now_be_white__This_simulator_uses_the_memory_locations__tt__0200__tt__to__tt__05ff__tt__to_draw_pixels_on_its_display__The_values__tt__00__tt__to__tt__0f__tt__represent_16_different_colours___tt__00__tt__is_black_and__tt__01__tt__is_white___so_storing_the_value__tt__01__tt__at_memory_location__tt__0200__tt__draws_a_white_pixel_at_the_top_left_corner__This_is_simpler_than_how_an_actual_computer_would_output_video__but_it_ll_do_for_now__2uj5CX">"Press &lt;b>Step&lt;/b> again to execute the second instruction. The top-left pixel of the game console should now be white. This simulator uses the memory locations &lt;tt>$0200&lt;/tt> to &lt;tt>$05ff&lt;/tt> to draw pixels on its display. The values &lt;tt>$00&lt;/tt> to &lt;tt>$0f&lt;/tt> represent 16 different colours (&lt;tt>$00&lt;/tt> is black and &lt;tt>$01&lt;/tt> is white), so storing the value &lt;tt>$01&lt;/tt> at memory location &lt;tt>$0200&lt;/tt> draws a white pixel at the top left corner. This is simpler than how an actual computer would output video, but it\'ll do for now."</string>
  <string name="_Equipped_with_that_knowledge__you_should_be_able_to_see_that_the_instruction__tt_LDA___01__tt__loads_the_hex_value__tt__01__tt__into_register__tt_A__tt___I_ll_go_into_more_detail_on_registers_in_the_next_section__1WmL1o">"Equipped with that knowledge, you should be able to see that the instruction &lt;tt>LDA #$01&lt;/tt> loads the hex value &lt;tt>$01&lt;/tt> into register &lt;tt>A&lt;/tt>. I\'ll go into more detail on registers in the next section."</string>
  <string name="_Any_numbers_prefixed_with__tt____tt__in_6502_assembly_language__and_by_extension__in_this_book__are_in_hexadecimal__hex__format__If_you_re_not_familiar_with_hex_numbers__I_recommend_you_read__a_href__http___en_wikipedia_org_wiki_Hexadecimal__the_Wikipedia_article__a___Anything_prefixed_with__tt____tt__is_a_literal_number_value__Any_other_number_refers_to_a_memory_location__Zddu1k">"Any numbers prefixed with &lt;tt>$&lt;/tt> in 6502 assembly language (and by extension, in this book) are in hexadecimal (hex) format. If you\'re not familiar with hex numbers, I recommend you read &lt;a href=\"http://en.wikipedia.org/wiki/Hexadecimal\">the Wikipedia article&lt;/a>. Anything prefixed with &lt;tt>#&lt;/tt> is a literal number value. Any other number refers to a memory location."</string>
  <string name="_So__what_s_this_program_actually_doing__Let_s_step_through_it__Hit__b_Reset__b___then_select__b_Step__b__from_the_dropdown_menu__The_button_will_switch_to_step_mode__allowing_you_to_execute_the_program_one_instruction_at_a_time__Click_once_and_you_ll_notice_in_the_debugger_that__tt_A___tt__changed_from__tt__00__tt__to__tt__01__tt___and__tt_PC___tt__changed_from__tt__0600__tt__to__tt__0602__tt___ZdD2Ad">"So, what\'s this program actually doing? Let\'s step through it. Hit &lt;b>Reset&lt;/b>, then select &lt;b>Step&lt;/b> from the dropdown menu. The button will switch to step mode, allowing you to execute the program one instruction at a time. Click once and you\'ll notice in the debugger that &lt;tt>A=&lt;/tt> changed from &lt;tt>$00&lt;/tt> to &lt;tt>$01&lt;/tt>, and &lt;tt>PC=&lt;/tt> changed from &lt;tt>$0600&lt;/tt> to &lt;tt>$0602&lt;/tt>."</string>
  <string name="_The_black_game_console_screen_now_should_show_three_coloured__pixels__at_the_top_left__Z216og8">"The black game console screen now should show three coloured \"pixels\" at the top left."</string>
  <string name="_So__let_s_dive_in__This_application_contains_a__a_href__https___github_com_skilldrick_6502js__JavaScript_6502_Assembler_and_Simulator__a__that_I_have_adapted_for_this_interactive_tutorial__Click_the__b_Copy__b__button_in_the_code_block_below_to_copy_the_example_code_to_the_editor__Then_click_the_button_in_the_top_right_to_assemble_the_code__then_click_it_again_to_run_the_program__You_can_also_access_these_actions_through_the_dropdown_menu__cRSo9">"So, let\'s dive in! This application contains a &lt;a href=\"https://github.com/skilldrick/6502js\">JavaScript 6502 Assembler and Simulator&lt;/a> that I have adapted for this interactive tutorial. Click the &lt;b>Copy&lt;/b> button in the code block below to copy the example code to the editor. Then click the button in the top right to assemble the code, then click it again to run the program. You can also access these actions through the dropdown menu."</string>
  <string name="_Our_first_program_Z2eKrwv">"Our first program"</string>
  <string name="_Then_why_6502__Why_not_a__i_useful__i__assembly_language__like__a_href__http___en_wikipedia_org_wiki_X86__x86__a___Well__I_don_t_think_learning_x86_is_useful__I_don_t_think_you_ll_ever_have_to__i_write__i__assembly_language_in_your_day_job___this_is_purely_an_academic_exercise__something_to_expand_your_mind_and_your_thinking__6502_was_originally_written_in_a_different_age__a_time_when_the_majority_of_developers_were_writing_assembly_directly__rather_than_in_these_new_fangled_high_level_programming_languages__So__it_was_designed_to_be_written_by_humans__More_modern_assembly_languages_are_meant_to_written_by_compilers__so_let_s_leave_it_to_them__Plus__6502_is__i_fun__i___Nobody_ever_called_x86__i_fun__i___Z18zqW8">"Then why 6502? Why not a &lt;i>useful&lt;/i> assembly language, like &lt;a href=\"http://en.wikipedia.org/wiki/X86\">x86&lt;/a>? Well, I don\'t think learning x86 is useful. I don\'t think you\'ll ever have to &lt;i>write&lt;/i> assembly language in your day job - this is purely an academic exercise, something to expand your mind and your thinking. 6502 was originally written in a different age, a time when the majority of developers were writing assembly directly, rather than in these new-fangled high-level programming languages. So, it was designed to be written by humans. More modern assembly languages are meant to written by compilers, so let\'s leave it to them. Plus, 6502 is &lt;i>fun&lt;/i>. Nobody ever called x86 &lt;i>fun&lt;/i>."</string>
  <string name="_Seriously_though__I_think_it_s_valuable_to_have_an_understanding_of_assembly_language__Assembly_language_is_the_lowest_level_of_abstraction_in_computers___the_point_at_which_the_code_is_still_readable__Assembly_language_translates_directly_to_the_bytes_that_are_executed_by_your_computer_s_processor__If_you_understand_how_it_works__you_ve_basically_become_a_computer__a_href__http___skilldrick_co_uk_2011_04_magic_in_software_development___magician__a___Z2haKwe">"Seriously though, I think it\'s valuable to have an understanding of assembly language. Assembly language is the lowest level of abstraction in computers - the point at which the code is still readable. Assembly language translates directly to the bytes that are executed by your computer\'s processor. If you understand how it works, you\'ve basically become a computer &lt;a href=\"http://skilldrick.co.uk/2011/04/magic-in-software-development/\">magician&lt;/a>."</string>
  <string name="__Actually__I_ve_been_reliably_informed_that_6502_processors_are_still_being_produced_by__a_href__http___www_westerndesigncenter_com_wdc_w65c02s_chip_cfm__Western_Design_Center__a__and__a_href__http___www_mouser_co_uk_Search_Refine_aspx_Keyword_65C02__sold_to_hobbyists__a___so_clearly_6502__i_isn_apos_t__i__a_dead_language__Who_knew___Z1J0HYN">"(Actually, I\'ve been reliably informed that 6502 processors are still being produced by &lt;a href=\"http://www.westerndesigncenter.com/wdc/w65c02s-chip.cfm\">Western Design Center&lt;/a> and &lt;a href=\"http://www.mouser.co.uk/Search/Refine.aspx?Keyword=65C02\">sold to hobbyists&lt;/a>, so clearly 6502 &lt;i>isn&amp;apos;t&lt;/i> a dead language! Who knew?)"</string>
  <string name="_So__why_would_you_want_to_learn_6502__It_s_a_dead_language_isn_t_it__Well__so_s_Latin__And_they_still_teach_that___a_href__http___en_wikipedia_org_wiki_Q_E_D___Q_E_D___a__2mPHnx">"So, why would you want to learn 6502? It\'s a dead language isn\'t it? Well, so\'s Latin. And they still teach that. &lt;a href=\"http://en.wikipedia.org/wiki/Q.E.D.\">Q.E.D.&lt;/a>"</string>
  <string name="_In_this_tiny_tutorial_I_m_going_to_show_you_how_to_get_started_writing_6502_assembly_language__The_6502_processor_was_massive_in_the_seventies_and_eighties__powering_famous_computers_like_the__a_href__http___en_wikipedia_org_wiki_BBC_Micro__BBC_Micro__a____a_href__http___en_wikipedia_org_wiki_Atari_2600__Atari_2600__a____a_href__http___en_wikipedia_org_wiki_Commodore_64__Commodore_64__a____a_href__http___en_wikipedia_org_wiki_Apple_II__Apple_II__a___and_the__a_href__http___en_wikipedia_org_wiki_Nintendo_Entertainment_System__Nintendo_Entertainment_System__a___Bender_in_Futurama__a_href__http___www_transbyte_org_SID_SID_files_Bender_6502_jpg__has_a_6502_processor_for_a_brain__a____a_href__http___www_pagetable_com_docs_terminator_00_37_23_jpg__Even_the_Terminator_was_programmed_in_6502__a___Z1G0SFd">"In this tiny tutorial I\'m going to show you how to get started writing 6502 assembly language. The 6502 processor was massive in the seventies and eighties, powering famous computers like the &lt;a href=\"http://en.wikipedia.org/wiki/BBC_Micro\">BBC Micro&lt;/a>, &lt;a href=\"http://en.wikipedia.org/wiki/Atari_2600\">Atari 2600&lt;/a>, &lt;a href=\"http://en.wikipedia.org/wiki/Commodore_64\">Commodore 64&lt;/a>, &lt;a href=\"http://en.wikipedia.org/wiki/Apple_II\">Apple II&lt;/a>, and the &lt;a href=\"http://en.wikipedia.org/wiki/Nintendo_Entertainment_System\">Nintendo Entertainment System&lt;/a>. Bender in Futurama &lt;a href=\"http://www.transbyte.org/SID/SID-files/Bender_6502.jpg\">has a 6502 processor for a brain&lt;/a>. &lt;a href=\"http://www.pagetable.com/docs/terminator/00-37-23.jpg\">Even the Terminator was programmed in 6502&lt;/a>."</string>
  <string name="Introduction">"Introduction"</string>
  <string name="_Tutorial__sub_by__a_href__https___www_skilldrick_co_uk___Nick_Morgan__a___licensed_under_CC_BY_4_0__sub__1M7PIE">"Tutorial &lt;sub>by &lt;a href=\"https://www.skilldrick.co.uk/\">Nick Morgan&lt;/a>, licensed under CC BY 4.0&lt;/sub>"</string>
  <string name="__b__tt__10__tt___tt__15__tt___b___Snake_position_data__head__body_segments__tail__ZKBUH3">"&lt;b>&lt;tt>$10&lt;/tt>-&lt;tt>$15&lt;/tt>&lt;/b>: Snake position data (head, body segments, tail)"</string>
  <string name="__b__tt__03__tt___b___Snake_length_Z1torzH">"&lt;b>&lt;tt>$03&lt;/tt>&lt;/b>: Snake length"</string>
  <string name="__b__tt__02__tt___b___Snake_direction__1_up__2_right__4_down__8_left__Z2f9IF2">"&lt;b>&lt;tt>$02&lt;/tt>&lt;/b>: Snake direction (1=up, 2=right, 4=down, 8=left)"</string>
  <string name="__b__tt__00__tt___tt__01__tt___b___Apple_position_Z1aqMwv">"&lt;b>&lt;tt>$00&lt;/tt>-&lt;tt>$01&lt;/tt>&lt;/b>: Apple position"</string>
  <string name="_Snake_Game_Memory_Usage_btnrC">"Snake Game Memory Usage"</string>
  <string name="__b_E__b__or_Space_key___tt__20__tt___1Tjb5z">"&lt;b>E&lt;/b> or Space key (&lt;tt>$20&lt;/tt>)"</string>
  <string name="__b_Q__b__or_Enter_Return_key___tt__0D__tt___2aspO6">"&lt;b>Q&lt;/b> or Enter/Return key (&lt;tt>$0D&lt;/tt>)"</string>
  <string name="__b_Action_buttons__b___1FOCe">"&lt;b>Action buttons&lt;/b>:"</string>
  <string name="__b_D__b__or_Right_Arrow_key___tt__64__tt___ZAFEqH">"&lt;b>D&lt;/b> or Right Arrow key (&lt;tt>$64&lt;/tt>)"</string>
  <string name="__b_S__b__or_Down_Arrow_key___tt__73__tt___19CCNY">"&lt;b>S&lt;/b> or Down Arrow key (&lt;tt>$73&lt;/tt>)"</string>
  <string name="__b_A__b__or_Left_Arrow_key___tt__61__tt___Z1A7tEM">"&lt;b>A&lt;/b> or Left Arrow key (&lt;tt>$61&lt;/tt>)"</string>
  <string name="__b_W__b__or_Up_Arrow_key___tt__77__tt___Z1i2Viy">"&lt;b>W&lt;/b> or Up Arrow key (&lt;tt>$77&lt;/tt>)"</string>
  <string name="__b_Directional_controls__b___Z2t9lpj">"&lt;b>Directional controls&lt;/b>:"</string>
  <string name="__b__tt__FF__tt___b___Last_pressed_key__ASCII_code__Z19lH3v">"&lt;b>&lt;tt>$FF&lt;/tt>&lt;/b>: Last pressed key (ASCII code)"</string>
  <string name="__b__tt__FE__tt___b___Random_number_generator__reads_as_a_random_value_0_255__Z2fyOd2">"&lt;b>&lt;tt>$FE&lt;/tt>&lt;/b>: Random number generator (reads as a random value 0-255)"</string>
  <string name="_Special_Memory_Locations__in_Simulator__IKjvi">"Special Memory Locations (in Simulator)"</string>
  <string name="__b_PHA_PLA__b___Push_pull_accumulator_to_from_stack_Z19ofja">"&lt;b>PHA/PLA&lt;/b>: Push/pull accumulator to/from stack"</string>
  <string name="__b_BEQ_BNE_BCC_BCS__b___Branch_if_equal_not_equal_carry_clear_carry_set_Z1oVQ92">"&lt;b>BEQ/BNE/BCC/BCS&lt;/b>: Branch if equal/not equal/carry clear/carry set"</string>
  <string name="__b_JSR_RTS__b___Jump_to_subroutine___Return_from_subroutine_ZNbjqf">"&lt;b>JSR/RTS&lt;/b>: Jump to subroutine / Return from subroutine"</string>
  <string name="__b_JMP__b___Unconditional_jump_1tOzM">"&lt;b>JMP&lt;/b>: Unconditional jump"</string>
  <string name="__b_ADC_SBC__b___Add_subtract_with_carry_Z1bM2Xa">"&lt;b>ADC/SBC&lt;/b>: Add/subtract with carry"</string>
  <string name="__b_INX_INY_DEX_DEY__b___Increment_decrement_registers_1eWjGj">"&lt;b>INX/INY/DEX/DEY&lt;/b>: Increment/decrement registers"</string>
  <string name="__b_STA_STX_STY__b___Store_registers_to_memory_9EGoS">"&lt;b>STA/STX/STY&lt;/b>: Store registers to memory"</string>
  <string name="__b_LDA_LDX_LDY__b___Load_registers_YTVAr">"&lt;b>LDA/LDX/LDY&lt;/b>: Load registers"</string>
  <string name="_Common_Instructions_2tuEXC">"Common Instructions"</string>
  <string name="__b_Indirect_Indexed__b____tt___c0__Y__tt____Dereference_zero_page_address__then_add_Y_Z1c9vkg">"&lt;b>Indirect Indexed&lt;/b> (&lt;tt>($c0),Y&lt;/tt>): Dereference zero page address, then add Y"</string>
  <string name="__b_Indexed_Indirect__b____tt___c0_X___tt____Add_X_to_zero_page_address__then_dereference_1zVI1s">"&lt;b>Indexed Indirect&lt;/b> (&lt;tt>($c0,X)&lt;/tt>): Add X to zero page address, then dereference"</string>
  <string name="__b_Indirect__b____tt___c000___tt____Look_up_address_stored_at_given_location_1uy5cv">"&lt;b>Indirect&lt;/b> (&lt;tt>($c000)&lt;/tt>): Look up address stored at given location"</string>
  <string name="__b_Absolute_X_Y__b____tt__c000_X__tt____Add_X_Y_register_to_absolute_address_ZdTHbX">"&lt;b>Absolute,X/Y&lt;/b> (&lt;tt>$c000,X&lt;/tt>): Add X/Y register to absolute address"</string>
  <string name="__b_Zero_Page_X_Y__b____tt__c0_X__tt____Add_X_Y_register_to_zero_page_address_Z2526wu">"&lt;b>Zero Page,X/Y&lt;/b> (&lt;tt>$c0,X&lt;/tt>): Add X/Y register to zero page address"</string>
  <string name="__b_Absolute__b____tt__c000__tt____Access_any_memory_location_1iqAxf">"&lt;b>Absolute&lt;/b> (&lt;tt>$c000&lt;/tt>): Access any memory location"</string>
  <string name="__b_Zero_Page__b____tt__c0__tt____Access_memory_locations__tt__00__tt___tt__FF__tt__ZvCgCW">"&lt;b>Zero Page&lt;/b> (&lt;tt>$c0&lt;/tt>): Access memory locations &lt;tt>$00&lt;/tt>-&lt;tt>$FF&lt;/tt>"</string>
  <string name="__b_Immediate__b____tt___c0__tt____Use_the_actual_value_ZzszL8">"&lt;b>Immediate&lt;/b> (&lt;tt>#$c0&lt;/tt>): Use the actual value"</string>
  <string name="_Addressing_Modes_2dKMt8">"Addressing Modes"</string>
  <string name="_Used_for_conditional_branching_1Cnzel">"Used for conditional branching"</string>
  <string name="__b_C__b___Carry___Set_when_arithmetic_operations_overflow_a_byte_Z1nuJcM">"&lt;b>C&lt;/b> (Carry): Set when arithmetic operations overflow a byte"</string>
  <string name="__b_Z__b___Zero___Set_when_result_is_zero_Z1SohVy">"&lt;b>Z&lt;/b> (Zero): Set when result is zero"</string>
  <string name="__b_I__b___Interrupt___Set_when_interrupts_are_disabled_1SwrHL">"&lt;b>I&lt;/b> (Interrupt): Set when interrupts are disabled"</string>
  <string name="__b_D__b___Decimal___Set_when_processor_is_in_BCD__Binary_Coded_Decimal__mode_18r6mA">"&lt;b>D&lt;/b> (Decimal): Set when processor is in BCD (Binary Coded Decimal) mode"</string>
  <string name="__b_B__b___Break___Set_when_BRK_instruction_is_executed_Z18S7Ib">"&lt;b>B&lt;/b> (Break): Set when BRK instruction is executed"</string>
  <string name="__b_V__b___Overflow___Set_when_arithmetic_operation_causes_signed_overflow_ZxFxdh">"&lt;b>V&lt;/b> (Overflow): Set when arithmetic operation causes signed overflow"</string>
  <string name="__b_N__b___Negative___Set_when_bit_7_of_result_is_set_Z2pFiTm">"&lt;b>N&lt;/b> (Negative): Set when bit 7 of result is set"</string>
  <string name="_Processor_Flags_Za9lQL">"Processor Flags"</string>
  <string name="__b_PC__b___Program_Counter___Points_to_the_next_instruction_to_execute_170bWK">"&lt;b>PC&lt;/b> (Program Counter): Points to the next instruction to execute"</string>
  <string name="__b_SP__b___Stack_Pointer___Points_to_current_stack_position__starts_at__tt__FF__tt___Z2uza6t">"&lt;b>SP&lt;/b> (Stack Pointer): Points to current stack position (starts at &lt;tt>$FF&lt;/tt>)"</string>
  <string name="__b_X__Y__b___Index_registers_for_addressing_and_counting_ZHNjBl">"&lt;b>X, Y&lt;/b>: Index registers for addressing and counting"</string>
  <string name="__b_A__b___Accumulator___Main_register_for_calculations_and_data_manipulation_Psyuz">"&lt;b>A&lt;/b> (Accumulator): Main register for calculations and data manipulation"</string>
  <string name="Registers">"Registers"</string>
  <string name="__b__tt__f__tt___b___Light_grey___tt__bbbbbb__tt___1SYow3">"&lt;b>&lt;tt>$f&lt;/tt>&lt;/b>: Light grey (&lt;tt>#bbbbbb&lt;/tt>)"</string>
  <string name="__b__tt__e__tt___b___Light_blue___tt__0088ff__tt___1TMos6">"&lt;b>&lt;tt>$e&lt;/tt>&lt;/b>: Light blue (&lt;tt>#0088ff&lt;/tt>)"</string>
  <string name="__b__tt__d__tt___b___Light_green___tt__aaff66__tt___1ooFTX">"&lt;b>&lt;tt>$d&lt;/tt>&lt;/b>: Light green (&lt;tt>#aaff66&lt;/tt>)"</string>
  <string name="__b__tt__c__tt___b___Grey___tt__777777__tt___VeNBo">"&lt;b>&lt;tt>$c&lt;/tt>&lt;/b>: Grey (&lt;tt>#777777&lt;/tt>)"</string>
  <string name="__b__tt__b__tt___b___Dark_grey___tt__333333__tt___1sg3BN">"&lt;b>&lt;tt>$b&lt;/tt>&lt;/b>: Dark grey (&lt;tt>#333333&lt;/tt>)"</string>
  <string name="__b__tt__a__tt___b___Light_red___tt__ff7777__tt___Z2pfu96">"&lt;b>&lt;tt>$a&lt;/tt>&lt;/b>: Light red (&lt;tt>#ff7777&lt;/tt>)"</string>
  <string name="__b__tt__9__tt___b___Brown___tt__664400__tt___Z1ssQBQ">"&lt;b>&lt;tt>$9&lt;/tt>&lt;/b>: Brown (&lt;tt>#664400&lt;/tt>)"</string>
  <string name="__b__tt__8__tt___b___Orange___tt__dd8855__tt___dPCVM">"&lt;b>&lt;tt>$8&lt;/tt>&lt;/b>: Orange (&lt;tt>#dd8855&lt;/tt>)"</string>
  <string name="__b__tt__7__tt___b___Yellow___tt__eeee77__tt___Z2wxzK">"&lt;b>&lt;tt>$7&lt;/tt>&lt;/b>: Yellow (&lt;tt>#eeee77&lt;/tt>)"</string>
  <string name="__b__tt__6__tt___b___Blue___tt__0000aa__tt___ZuFAqS">"&lt;b>&lt;tt>$6&lt;/tt>&lt;/b>: Blue (&lt;tt>#0000aa&lt;/tt>)"</string>
  <string name="__b__tt__5__tt___b___Green___tt__00cc55__tt___Hbtpt">"&lt;b>&lt;tt>$5&lt;/tt>&lt;/b>: Green (&lt;tt>#00cc55&lt;/tt>)"</string>
  <string name="__b__tt__4__tt___b___Purple___tt__cc44cc__tt___ZInSvj">"&lt;b>&lt;tt>$4&lt;/tt>&lt;/b>: Purple (&lt;tt>#cc44cc&lt;/tt>)"</string>
  <string name="__b__tt__3__tt___b___Cyan___tt__aaffee__tt___11C6oj">"&lt;b>&lt;tt>$3&lt;/tt>&lt;/b>: Cyan (&lt;tt>#aaffee&lt;/tt>)"</string>
  <string name="__b__tt__2__tt___b___Red___tt__880000__tt___2gvnWo">"&lt;b>&lt;tt>$2&lt;/tt>&lt;/b>: Red (&lt;tt>#880000&lt;/tt>)"</string>
  <string name="__b__tt__1__tt___b___White___tt__ffffff__tt___Z2tN0n2">"&lt;b>&lt;tt>$1&lt;/tt>&lt;/b>: White (&lt;tt>#ffffff&lt;/tt>)"</string>
  <string name="__b__tt__0__tt___b___Black___tt__000000__tt___8k89p">"&lt;b>&lt;tt>$0&lt;/tt>&lt;/b>: Black (&lt;tt>#000000&lt;/tt>)"</string>
  <string name="_Color_Palette_Z1u2nGs">"Color Palette"</string>
  <string name="_First_row___tt__0200__tt___tt__021F__tt___second_row___tt__0220__tt___tt__023F__tt___etc__Z23xpbU">"First row: &lt;tt>$0200&lt;/tt>-&lt;tt>$021F&lt;/tt>, second row: &lt;tt>$0220&lt;/tt>-&lt;tt>$023F&lt;/tt>, etc."</string>
  <string name="_Organized_as_four_horizontal_strips_of_32_8_pixels_ZCQeNP">"Organized as four horizontal strips of 32×8 pixels"</string>
  <string name="_Values__tt__00__tt___tt__0F__tt__represent_16_different_colors___tt__00__tt__black___tt__01__tt__white__Z1HerEs">"Values &lt;tt>$00&lt;/tt>-&lt;tt>$0F&lt;/tt> represent 16 different colors (&lt;tt>$00&lt;/tt>=black, &lt;tt>$01&lt;/tt>=white)"</string>
  <string name="_Screen_maps_to_memory_range__tt__0200__tt___tt__05FF__tt__3X6BT">"Screen maps to memory range &lt;tt>$0200&lt;/tt>-&lt;tt>$05FF&lt;/tt>"</string>
  <string name="_Display_Organization_Z2bG9K1">"Display Organization"</string>
  <string name="__b_Program_Storage__b___Starting_at__tt__0600__tt__1rbAYd">"&lt;b>Program Storage&lt;/b>: Starting at &lt;tt>$0600&lt;/tt>"</string>
  <string name="__b_Display_Memory__b____tt__0200__tt___tt__05FF__tt___used_for_screen_output__Z7vtRw">"&lt;b>Display Memory&lt;/b>: &lt;tt>$0200&lt;/tt>-&lt;tt>$05FF&lt;/tt> (used for screen output)"</string>
  <string name="__b_Stack__b____tt__0100__tt___tt__01FF__tt__Z11pNI8">"&lt;b>Stack&lt;/b>: &lt;tt>$0100&lt;/tt>-&lt;tt>$01FF&lt;/tt>"</string>
  <string name="__b_Zero_Page__b____tt__0000__tt___tt__00FF__tt___first_256_bytes__faster_access__l3Tqa">"&lt;b>Zero Page&lt;/b>: &lt;tt>$0000&lt;/tt>-&lt;tt>$00FF&lt;/tt> (first 256 bytes, faster access)"</string>
  <string name="_Memory_Map_ZmWVek">"Memory Map"</string>
  <string name="Emulator">"Emulator"</string>
  <string name="Learning">"Learning"</string>
  <string name="Programming">"Programming"</string>
  <string name="Assembly">"Assembly"</string>
  <string name="_First_release_of_Learn_6502_Assembly_for_GNOME_Z1sYxAY">"First release of Learn 6502 Assembly for GNOME"</string>
  <string name="_Fixed_build_error_on_PostmarketOS__improving_mobile_compatibility_Z1PLMTu">"Fixed build error on PostmarketOS, improving mobile compatibility"</string>
  <string name="_Debugger_now_only_updates_when_visible__reducing_unnecessary_processing_14yMO">"Debugger now only updates when visible, reducing unnecessary processing"</string>
  <string name="_Reduced_default_hex_monitor_address_range_for_better_efficiency_2kmHiu">"Reduced default hex monitor address range for better efficiency"</string>
  <string name="_Enhanced_the_hex_monitor_address_range_input_for_easier_value_editing_21aSsV">"Enhanced the hex monitor address range input for easier value editing"</string>
  <string name="_Improved_the_game_console_performance_for_smoother_gameplay_Z17FJRF">"Improved the game console performance for smoother gameplay"</string>
  <string name="_Optimized_Flatpak_configuration_by_removing_unnecessary_permissions_2oTAd0">"Optimized Flatpak configuration by removing unnecessary permissions"</string>
  <string name="_Improved_descriptions_to_be_more_welcoming_for_non_technical_users_sCxwc">"Improved descriptions to be more welcoming for non-technical users"</string>
  <string name="_Enhanced_app_presentation_and_accessibility_uAd9s">"Enhanced app presentation and accessibility"</string>
  <string name="_Added_file_management_to_save_and_load_your_programs_Z2tqqjA">"Added file management to save and load your programs"</string>
  <string name="_Games_now_automatically_pause_when_switching_between_screens_Z1Dn30D">"Games now automatically pause when switching between screens"</string>
  <string name="_Many_minor_bugs_have_been_fixed_to_improve_overall_usability_1iDRoi">"Many minor bugs have been fixed to improve overall usability"</string>
  <string name="_New_tools_to_examine_your_code__including_disassembler_and_fast_switchable_memory_viewer_1rm4cg">"New tools to examine your code, including disassembler and fast switchable memory viewer"</string>
  <string name="_Improved_game_screen_and_controls_for_mobile_devices_CiiU3">"Improved game screen and controls for mobile devices"</string>
  <string name="_Added_help_feature_to_make_code_editing_easier_for_beginners_Z2nKQ0T">"Added help feature to make code editing easier for beginners"</string>
  <string name="_Major_update_focusing_on_improved_learning_experience_and_usability_18xQei">"Major update focusing on improved learning experience and usability"</string>
  <string name="_Virtual_game_console_displaying_three_colored_pixels_boXc9">"Virtual game console displaying three colored pixels"</string>
  <string name="_Built_in_debugger_showing_real_time_registers__flags__and_memory_1V8VTp">"Built-in debugger showing real-time registers, flags, and memory"</string>
  <string name="_Code_editor_with_6502_assembly_syntax_highlighting_and_visible_help_ZGIEO6">"Code editor with 6502 assembly syntax highlighting and visible help"</string>
  <string name="_Interactive_tutorial_interface_in_dark_theme_19fPUX">"Interactive tutorial interface in dark theme"</string>
  <string name="_Interactive_tutorial_interface_in_light_theme_Z2qKrS6">"Interactive tutorial interface in light theme"</string>
  <string name="_See_your_code_run_on_a_virtual_game_console_Z29qd8U">"See your code run on a virtual game console"</string>
  <string name="_Debug_your_programs_with_real_time_tools_qosm2">"Debug your programs with real-time tools"</string>
  <string name="_Write_code_with_a_built_in_editor_22JfOA">"Write code with a built-in editor"</string>
  <string name="_Learn_step_by_step_with_an_interactive_tutorial_Z29gL9p">"Learn step-by-step with an interactive tutorial"</string>
  <string name="_Features__1Rmckd">"Features:"</string>
  <string name="_A_comprehensive_learning_environment_for_programming_vintage_computers_and_game_consoles_using_6502_assembly_language__Z1yBBkb">"A comprehensive learning environment for programming vintage computers and game consoles using 6502 assembly language."</string>
  <string name="_6502_Assembly_Learning_Environment_2fCV79">"6502 Assembly Learning Environment"</string>
  <string name="_Copy_to_clipboard_2PTO2">"Copy to clipboard"</string>
  <string name="_Full_Memory___0000__FFFF__2sOwGS">"Full Memory ($0000-$FFFF)"</string>
  <string name="_Random_Input___FE__FF__Z8qAK7">"Random/Input ($FE-$FF)"</string>
  <string name="_Snake_Game_Data___00__15__1F8F70">"Snake Game Data ($00-$15)"</string>
  <string name="_Program_Storage___0600__FFFF__ZyAWtE">"Program Storage ($0600-$FFFF)"</string>
  <string name="_Display_Memory___0200__05FF__PLOnz">"Display Memory ($0200-$05FF)"</string>
  <string name="_Stack___0100__01FF__WUnbs">"Stack ($0100-$01FF)"</string>
  <string name="_Zero_Page___0000__00FF__1dvTE1">"Zero Page ($0000-$00FF)"</string>
  <string name="_There_are_currently_no_settings__2jAkl8">"There are currently no settings."</string>
  <string name="_Main_Settings_Z2a4Oqa">"Main Settings"</string>
  <string name="Appearance">"Appearance"</string>
  <string name="Preferences">"Preferences"</string>
  <string name="_Learn_how_to_program_the_6502_microprocessor__OXijz">"Learn how to program the 6502 microprocessor."</string>
  <string name="Disassembled">"Disassembled"</string>
  <string name="Hexdump">"Hexdump"</string>
  <string name="_Hex_Monitor_26WWP2">"Hex Monitor"</string>
  <string name="Messages">"Messages"</string>
  <string name="Information">"Information"</string>
  <string name="Discard">"Discard"</string>
  <string name="Cancel">"Cancel"</string>
  <string name="_Your_file_has_unsaved_changes__Changes_will_be_lost_if_you_don_t_save_them__1jrVtU">"Your file has unsaved changes. Changes will be lost if you don\'t save them."</string>
  <string name="_Save_changes__BGToh">"Save changes?"</string>
  <string name="Continue">"Continue"</string>
  <string name="Quit">"Quit"</string>
  <string name="_About_Learn_6502_Assembly_ZX2nrT">"About Learn 6502 Assembly"</string>
  <string name="Help">"Help"</string>
  <string name="_Save_as____1Rwize">"Save as..."</string>
  <string name="Save">"Save"</string>
  <string name="_Open____sYsTB">"Open..."</string>
  <string name="_Game_Console_Z1Kv08p">"Game Console"</string>
  <string name="Debugger">"Debugger"</string>
  <string name="Editor">"Editor"</string>
  <string name="Learn">"Learn"</string>
  <string name="Menu">"Menu"</string>
  <string name="_Learn_6502_Assembly_2lhBH9">"Learn 6502 Assembly"</string>
  <string name="_Copy_to_editor_1INugX">"Copy to editor"</string>
  <string name="_All_Files_51THg">"All Files"</string>
  <string name="_Assembly_Files_Z2qRh98">"Assembly Files"</string>
  <string name="_File_saved_successfully_hlGuq">"File saved successfully"</string>
  <string name="_Error_saving_file_Fw4xg">"Error saving file"</string>
  <string name="_Save_Assembly_File_1jVN85">"Save Assembly File"</string>
  <string name="untitled">"untitled"</string>
  <string name="_Error_opening_file_1x63uv">"Error opening file"</string>
  <string name="_File_loaded_successfully_a6wL3">"File loaded successfully"</string>
  <string name="_Failed_to_load_file_1LPqBK">"Failed to load file"</string>
  <string name="_Open_Assembly_File_tGi5K">"Open Assembly File"</string>
  <string name="_Gamepad_key_pressed__D2sgb">"Gamepad key pressed:"</string>
  <string name="_Labels_failure_Z2tERrs">"Labels failure"</string>
  <string name="_Simulator_failure_ZMVICH">"Simulator failure"</string>
  <string name="_Disassembly__MtSVa">"Disassembly:"</string>
  <string name="_Hexdump__ZshyTT">"Hexdump:"</string>
  <string name="_Assemble_failed_16Fqw1">"Assemble failed"</string>
  <string name="_Assembled_successfully_sjhhk">"Assembled successfully"</string>
  <string name="_Program_paused_automatically_pg83R">"Program paused automatically"</string>
  <string name="_Failed_to_copy_to_clipboard_udcGJ">"Failed to copy to clipboard"</string>
  <string name="_Copied_to_clipboard_Z2bgfrU">"Copied to clipboard"</string>
  <string name="_Code_copied_to_editor_ZXrg1o">"Code copied to editor"</string>
  <string name="Step">"Step"</string>
  <string name="Reset">"Reset"</string>
  <string name="Resume">"Resume"</string>
  <string name="Pause">"Pause"</string>
  <string name="Run">"Run"</string>
  <string name="Assemble">"Assemble"</string>
  <string name="_File___s__has_unsaved_changes_2qBBIH">"File \"%1$s\" has unsaved changes"</string>
  <string name="_Unsaved_changes_9fqb4">"Unsaved changes"</string>
  <string name="_Program_completed_at_PC___s_ZX9J0f">"Program completed at PC=$%1$s"</string>
  <string name="_6502_Stack_emptied__Wrapping____1ktNKJ">"6502 Stack emptied! Wrapping..."</string>
  <string name="_6502_Stack_filled__Wrapping____Z1uzfCT">"6502 Stack filled! Wrapping..."</string>
  <string name="_Address__s___unknown_opcode_12gkt1">"Address %1$s - unknown opcode"</string>
  <string name="_wdm_output_Z1blUvC">"wdm-output"</string>
  <string name="Stopped">"Stopped"</string>
  <string name="_Unable_to_find_parse_given_address_label_Z1hcowP">"Unable to find/parse given address/label"</string>
  <string name="_No_address_or_label_provided_17PYXP">"No address or label provided"</string>
  <string name="_Label__label__is_already_used_as_a_symbol__please_rename_one_of_them_Zlh8tj">"Label {label} is already used as a symbol; please rename one of them"</string>
  <string name="_Label_already_defined_at_line__s___d_ZHNBwC">"Label already defined at line %1$s: %2$d"</string>
  <string name="_Indexing_labels____Z26cBX9">"Indexing labels..."</string>
  <string name="_Found__d_label__1vawu8">"Found $d label."</string>
  <string name="_Found__d_labels__14ydwt">"Found $d labels."</string>
  <string name="_Preprocessing_____LtJQr">"Preprocessing ..."</string>
  <string name="_Code_assembled_successfully___d_bytes__ZUwtGV">"Code assembled successfully, %1$d bytes."</string>
  <string name="_Out_of_range_branch_on_line__d__branches_are_limited_to__128_to__127____s_flIh9">"Out of range branch on line %1$d (branches are limited to -128 to +127): %2$s"</string>
  <string name="_Syntax_error_line__d___s_2jNvJ">"Syntax error line %1$d: %2$s"</string>
  <string name="_No_code_to_run__1rd1Uq">"No code to run."</string>
  <string name="_Assembling_code_____ZKs9pk">"Assembling code ..."</string>
  <string name="_Unable_to_relocate_code_outside_64k_memory_bFfft">"Unable to relocate code outside 64k memory"</string>
  <string name="_6502_7jqx">"6502"</string>
</resources>
