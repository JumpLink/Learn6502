<?xml version="1.0" encoding="utf-8"?>
<resources>
  <string name="_app_name_1k3Sbz">"Lerne 6502 Assembler"</string>
  <string name="app_name">"Lerne 6502 Assembler"</string>
  <string name="title_activity_kimera">"Lerne 6502 Assembler"</string>
  <string name="_The_last_subroutine___tt_spinWheels__tt___is_just_there_because_the_game_would_run_too_fast_otherwise__All__tt_spinWheels__tt__does_is_count__tt_X__tt__down_from_zero_until_it_hits_zero_again__The_first__tt_dex__tt__wraps__making__tt_X__tt___tt___ff__tt___1osJ5c">"Das letzte Unterprogramm, &lt;tt>spinWheels&lt;/tt>, ist nur da, weil das Spiel sonst zu schnell laufen würde. Alles, was &lt;tt>spinWheels&lt;/tt> tut, ist &lt;tt>X&lt;/tt> von Null herunterzuzählen, bis es wieder Null erreicht. Das erste &lt;tt>dex&lt;/tt> überläuft, wodurch &lt;tt>X&lt;/tt> zu &lt;tt>#$ff&lt;/tt> wird."</string>
  <string name="_Next_comes__tt_drawSnake__tt___This_is_pretty_simple_too___we_first_undraw_the_tail_and_then_draw_the_head___tt_X__tt__is_set_to_the_length_of_the_snake__so_we_can_index_to_the_right_pixel__and_we_set__tt_A__tt__to_zero_then_perform_the_write_using_the_indexed_indirect_addressing_mode__Then_we_reload__tt_X__tt__to_index_to_the_head__set__tt_A__tt__to_one_and_store_it_at__tt___10_x___tt____tt__10__tt__stores_the_two_byte_location_of_the_head__so_this_draws_a_white_pixel_at_the_current_head_position__As_only_the_head_and_the_tail_of_the_snake_move__this_is_enough_to_keep_the_snake_moving__12V3UP">"Als nächstes kommt &lt;tt>drawSnake&lt;/tt>. Dies ist auch ziemlich einfach - wir löschen zuerst den Schwanz und zeichnen dann den Kopf. &lt;tt>X&lt;/tt> wird auf die Länge der Schlange gesetzt, damit wir zum richtigen Pixel indexieren können, und wir setzen &lt;tt>A&lt;/tt> auf Null und führen dann das Schreiben mit dem indizierten indirekten Adressierungsmodus durch. Dann laden wir &lt;tt>X&lt;/tt> neu, um zum Kopf zu indexieren, setzen &lt;tt>A&lt;/tt> auf eins und speichern es in &lt;tt>($10,x)&lt;/tt>. &lt;tt>$10&lt;/tt> speichert die zweibyte-Position des Kopfes, also zeichnet dies einen weißen Pixel an der aktuellen Kopfposition. Da sich nur der Kopf und der Schwanz der Schlange bewegen, reicht dies aus, um die Schlange in Bewegung zu halten."</string>
  <string name="_Because_the_game_state_is_stored_in_terms_of_pixel_locations__rendering_the_game_is_very_straightforward__The_first_subroutine___tt_drawApple__tt___is_extremely_simple__It_sets__tt_Y__tt__to_zero__loads_a_random_colour_into_the_accumulator__then_stores_this_value_into__tt___00__y__tt____tt__00__tt__is_where_the_location_of_the_apple_is_stored__so__tt___00__y__tt__dereferences_to_this_memory_location__Read_the__Indirect_indexed__section_in__a_href___addressing__Addressing_modes__a__for_more_details__c02gF">"Da der Spielzustand in Form von Pixelpositionen gespeichert wird, ist die Darstellung des Spiels sehr einfach. Das erste Unterprogramm, &lt;tt>drawApple&lt;/tt>, ist extrem einfach. Es setzt &lt;tt>Y&lt;/tt> auf Null, lädt eine zufällige Farbe in den Akkumulator und speichert diesen Wert dann in &lt;tt>($00),y&lt;/tt>. &lt;tt>$00&lt;/tt> ist der Ort, an dem die Position des Apfels gespeichert ist, also dereferenziert &lt;tt>($00),y&lt;/tt> zu dieser Speicheradresse. Lies den Abschnitt \"Indirekt indiziert\" in &lt;a href=\"#addressing\">Adressierungsmodi&lt;/a> für weitere Details."</string>
  <string name="_Rendering_the_game_1G5D7r">"Das Spiel darstellen"</string>
  <string name="_I_won_t_explain_in_depth_how_each_of_the_directions_work__but_the_above_explanation_should_give_you_enough_to_work_it_out_with_a_bit_of_study__1PDvzm">"Ich werde nicht im Detail erklären, wie jede der Richtungen funktioniert, aber die obige Erklärung sollte dir genug geben, um es mit etwas Studium selbst herauszufinden."</string>
  <string name="_After_a_move_in_each_direction__we_also_need_to_check_to_see_if_the_head_would_become_out_of_bounds__This_is_handled_differently_for_each_direction__For_left_and_right__we_can_check_to_see_if_the_head_has_effectively__wrapped_around___Going_right_from__tt__021f__tt__by_incrementing_the_least_significant_byte_would_lead_to__tt__0220__tt___but_this_is_actually_jumping_from_the_last_pixel_of_the_first_row_to_the_first_pixel_of_the_second_row__So__every_time_we_move_right__we_need_to_check_if_the_new_least_significant_byte_is_a_multiple_of__tt__20__tt___This_is_done_using_a_bit_check_against_the_mask__tt__1f__tt___Hopefully_the_illustration_below_will_show_you_how_masking_out_the_lowest_5_bits_reveals_whether_a_number_is_a_multiple_of__tt__20__tt__or_not__1FDzf4">"Nach einer Bewegung in jede Richtung müssen wir auch überprüfen, ob der Kopf außerhalb der Grenzen geraten würde. Dies wird für jede Richtung unterschiedlich gehandhabt. Für links und rechts können wir überprüfen, ob der Kopf effektiv \"umgebrochen\" ist. Wenn man von &lt;tt>$021f&lt;/tt> nach rechts geht, indem man das niedrigstwertige Byte erhöht, würde dies zu &lt;tt>$0220&lt;/tt> führen, aber das bedeutet eigentlich einen Sprung vom letzten Pixel der ersten Zeile zum ersten Pixel der zweiten Zeile. Also müssen wir jedes Mal, wenn wir nach rechts gehen, überprüfen, ob das neue niedrigstwertige Byte ein Vielfaches von &lt;tt>$20&lt;/tt> ist. Dies geschieht durch eine Bit-Prüfung gegen die Maske &lt;tt>$1f&lt;/tt>. Die Illustration unten wird hoffentlich zeigen, wie das Maskieren der niedrigsten 5 Bits offenbart, ob eine Zahl ein Vielfaches von &lt;tt>$20&lt;/tt> ist oder nicht."</string>
  <string name="_Going_between_sections_is_more_complicated__as_we_have_to_take_into_account_the_most_significant_byte_as_well__For_example__going_down_from__tt__02e1__tt__should_lead_to__tt__0301__tt___Luckily__this_is_fairly_easy_to_accomplish__Adding__tt__20__tt__to__tt__e1__tt__results_in__tt__01__tt__and_sets_the_carry_bit__If_the_carry_bit_was_set__we_know_we_also_need_to_increment_the_most_significant_byte__WNPdQ">"Der Übergang zwischen den Abschnitten ist komplizierter, da wir auch das höchstwertige Byte berücksichtigen müssen. Zum Beispiel sollte das Heruntergehen von &lt;tt>$02e1&lt;/tt> zu &lt;tt>$0301&lt;/tt> führen. Glücklicherweise ist dies ziemlich einfach zu erreichen. Die Addition von &lt;tt>$20&lt;/tt> zu &lt;tt>$e1&lt;/tt> ergibt &lt;tt>$01&lt;/tt> und setzt das Carry-Bit. Wenn das Carry-Bit gesetzt wurde, wissen wir, dass wir auch das höchstwertige Byte erhöhen müssen."</string>
  <string name="_As_long_as_you_re_moving_within_one_of_these_horizontal_strips__things_are_simple__For_example__to_move_right__just_increment_the_least_significant_byte__e_g___tt__0200__tt__becomes__tt__0201__tt____To_go_down__add__tt__20__tt___e_g___tt__0200__tt__becomes__tt__0220__tt____Left_and_up_are_the_reverse__9ISvX">"Solange du dich innerhalb eines dieser horizontalen Streifen bewegst, sind die Dinge einfach. Um zum Beispiel nach rechts zu gehen, erhöhe einfach das niedrigstwertige Byte (z.B. wird aus &lt;tt>$0200&lt;/tt> dann &lt;tt>$0201&lt;/tt>). Um nach unten zu gehen, addiere &lt;tt>$20&lt;/tt> (z.B. wird aus &lt;tt>$0200&lt;/tt> dann &lt;tt>$0220&lt;/tt>). Links und oben sind die Umkehrung davon."</string>
  <string name="_You_can_think_of_the_screen_as_four_horizontal_strips_of_32___8_pixels__These_strips_map_to__tt__0200__02ff__tt____tt__0300__03ff__tt____tt__0400__04ff__tt__and__tt__0500__05ff__tt___The_first_rows_of_pixels_are__tt__0200__021f__tt____tt__0220__023f__tt____tt__0240__025f__tt___etc__Z1miEzv">"Du kannst dir den Bildschirm als vier horizontale Streifen von 32 × 8 Pixeln vorstellen. Diese Streifen werden auf &lt;tt>$0200-$02ff&lt;/tt>, &lt;tt>$0300-$03ff&lt;/tt>, &lt;tt>$0400-$04ff&lt;/tt> und &lt;tt>$0500-$05ff&lt;/tt> abgebildet. Die ersten Pixelreihen sind &lt;tt>$0200-$021f&lt;/tt>, &lt;tt>$0220-$023f&lt;/tt>, &lt;tt>$0240-$025f&lt;/tt>, usw."</string>
  <string name="_The_next_bit_updates_the_head_of_the_snake_depending_on_the_direction__This_is_probably_the_most_complicated_part_of_the_code__and_it_s_all_reliant_on_how_memory_locations_map_to_the_screen__so_let_s_look_at_that_in_more_detail__Z1buBFI">"Der nächste Teil aktualisiert den Kopf der Schlange abhängig von der Richtung. Dies ist wahrscheinlich der komplizierteste Teil des Codes, und es hängt alles davon ab, wie Speicheradressen auf den Bildschirm abgebildet werden, also lass uns das genauer betrachten."</string>
  <string name="_To_test_whether_the_direction_is__tt_1__tt____tt_2__tt____tt_4__tt__or__tt_8__tt___the_code_continually_shifts_right_until_the_carry_is_set__One__tt_LSR__tt__means__up___two_means__right___and_so_on__Z2aBNzL">"Um zu testen, ob die Richtung &lt;tt>1&lt;/tt>, &lt;tt>2&lt;/tt>, &lt;tt>4&lt;/tt> oder &lt;tt>8&lt;/tt> ist, verschiebt der Code kontinuierlich nach rechts, bis das Carry gesetzt ist. Ein &lt;tt>LSR&lt;/tt> bedeutet \"nach oben\", zwei bedeutet \"nach rechts\" und so weiter."</string>
  <string name="_Once_the_values_have_been_shifted_down_the_snake__we_have_to_work_out_what_to_do_with_the_head__The_direction_is_first_loaded_into__tt_A__tt____tt_LSR__tt__means__logical_shift_right___or__shift_all_the_bits_one_position_to_the_right___The_least_significant_bit_is_shifted_into_the_carry_flag__so_if_the_accumulator_is__tt_1__tt___after__tt_LSR__tt__it_is__tt_0__tt___with_the_carry_flag_set__tQ5Ll">"Sobald die Werte die Schlange hinunter verschoben wurden, müssen wir herausfinden, was mit dem Kopf zu tun ist. Die Richtung wird zuerst in &lt;tt>A&lt;/tt> geladen. &lt;tt>LSR&lt;/tt> bedeutet \"logische Verschiebung nach rechts\" oder \"verschiebe alle Bits um eine Position nach rechts\". Das niedrigstwertige Bit wird in das Carry-Flag verschoben, also wenn der Akkumulator &lt;tt>1&lt;/tt> ist, ist er nach &lt;tt>LSR&lt;/tt> &lt;tt>0&lt;/tt>, wobei das Carry-Flag gesetzt ist."</string>
  <string name="_The_length_is_initialized_to__tt_4__tt___so__tt_X__tt__starts_off_as__tt_3__tt____tt_LDA__10_x__tt__loads_the_value_of__tt__13__tt__into__tt_A__tt___then__tt_STA__12_x__tt__stores_this_value_into__tt__15__tt____tt_X__tt__is_decremented__and_we_loop__Now__tt_X__tt__is__tt_2__tt___so_we_load__tt__12__tt__and_store_it_into__tt__14__tt___This_loops_while__tt_X__tt__is_positive___tt_BPL__tt__means__branch_if_positive____15f5pL">"Die Länge wird auf &lt;tt>4&lt;/tt> initialisiert, also beginnt &lt;tt>X&lt;/tt> bei &lt;tt>3&lt;/tt>. &lt;tt>LDA $10,x&lt;/tt> lädt den Wert von &lt;tt>$13&lt;/tt> in &lt;tt>A&lt;/tt>, dann speichert &lt;tt>STA $12,x&lt;/tt> diesen Wert in &lt;tt>$15&lt;/tt>. &lt;tt>X&lt;/tt> wird dekrementiert und wir durchlaufen die Schleife. Jetzt ist &lt;tt>X&lt;/tt> &lt;tt>2&lt;/tt>, also laden wir &lt;tt>$12&lt;/tt> und speichern es in &lt;tt>$14&lt;/tt>. Dies läuft in einer Schleife, solange &lt;tt>X&lt;/tt> positiv ist (&lt;tt>BPL&lt;/tt> bedeutet \"verzweige wenn positiv\")."</string>
  <string name="_At_a_low_level__this_subroutine_is_slightly_more_complex__First__the_length_is_loaded_into_the__tt_X__tt__register__which_is_then_decremented__The_snippet_below_shows_the_starting_memory_for_the_snake__1UKtQ3">"Auf niedriger Ebene ist dieses Unterprogramm etwas komplexer. Zuerst wird die Länge in das &lt;tt>X&lt;/tt>-Register geladen, das dann dekrementiert wird. Der untenstehende Ausschnitt zeigt den Anfangsspeicher für die Schlange."</string>
  <string name="_After_collision_detection__we_update_the_snake_s_location__This_is_done_at_a_high_level_like_so__First__move_each_byte_pair_of_the_body_up_one_position_in_memory__Second__update_the_head_according_to_the_current_direction__Finally__if_the_head_is_out_of_bounds__handle_it_as_a_collision__I_ll_illustrate_this_with_some_ascii_art__Each_pair_of_brackets_contains_an_x_y_coordinate_rather_than_a_pair_of_bytes_for_simplicity__1mMWEs">"Nach der Kollisionserkennung aktualisieren wir die Position der Schlange. Dies wird auf hoher Ebene so gemacht: Zuerst wird jedes Bytepaar des Körpers um eine Position im Speicher nach oben verschoben. Zweitens wird der Kopf entsprechend der aktuellen Richtung aktualisiert. Schließlich wird, wenn der Kopf außerhalb der Grenzen ist, dies als Kollision behandelt. Ich werde dies mit ASCII-Kunst veranschaulichen. Jedes Klammerpaar enthält der Einfachheit halber eine x,y-Koordinate anstelle eines Bytepaars."</string>
  <string name="__tt_checkSnakeCollision__tt__loops_through_the_snake_s_body_segments__checking_each_byte_pair_against_the_head_pair__If_there_is_a_match__then_game_over__2lhmuJ">"&lt;tt>checkSnakeCollision&lt;/tt> durchläuft die Körpersegmente der Schlange und vergleicht jedes Bytepaar mit dem Kopfpaar. Wenn es eine Übereinstimmung gibt, dann ist das Spiel vorbei."</string>
  <string name="_The_next_subroutine___tt_checkCollision__tt___defers_to__tt_checkAppleCollision__tt__and__tt_checkSnakeCollision__tt____tt_checkAppleCollision__tt__just_checks_to_see_if_the_two_bytes_holding_the_location_of_the_apple_match_the_two_bytes_holding_the_location_of_the_head__If_they_do__the_length_is_increased_and_a_new_apple_position_is_generated__2af5u3">"Das nächste Unterprogramm, &lt;tt>checkCollision&lt;/tt>, delegiert an &lt;tt>checkAppleCollision&lt;/tt> und &lt;tt>checkSnakeCollision&lt;/tt>. &lt;tt>checkAppleCollision&lt;/tt> überprüft nur, ob die zwei Bytes, die die Position des Apfels enthalten, mit den zwei Bytes übereinstimmen, die die Position des Kopfes enthalten. Wenn sie übereinstimmen, wird die Länge erhöht und eine neue Apfelposition generiert."</string>
  <string name="_Updating_the_game_state_1H7cOH">"Den Spielzustand aktualisieren"</string>
  <string name="_So__looking_at__tt_upKey__tt___if_the_current_direction_is_down__4___the_bit_test_will_be_zero___tt_BNE__tt__means__branch_if_the_zero_flag_is_clear___so_in_this_case_we_ll_branch_to__tt_illegalMove__tt___which_just_returns_from_the_subroutine__Otherwise__the_new_direction__1_in_this_case__is_stored_in_the_appropriate_memory_location__1ixpMS">"Wenn wir also &lt;tt>upKey&lt;/tt> betrachten und die aktuelle Richtung nach unten ist (4), wird der Bit-Test Null sein. &lt;tt>BNE&lt;/tt> bedeutet \"verzweige, wenn das Zero-Flag nicht gesetzt ist\", also werden wir in diesem Fall zu &lt;tt>illegalMove&lt;/tt> verzweigen, was einfach aus dem Unterprogramm zurückkehrt. Andernfalls wird die neue Richtung (in diesem Fall 1) in der entsprechenden Speicheradresse gespeichert."</string>
  <string name="_The__tt_BIT__tt__opcode_is_similar_to__tt_AND__tt___but_the_calculation_is_only_used_to_set_the_zero_flag___the_actual_result_is_discarded__The_zero_flag_is_set_only_if_the_result_of_AND_ing_the_accumulator_with_argument_is_zero__When_we_re_looking_at_powers_of_two__the_zero_flag_will_only_be_set_if_the_two_numbers_are_not_the_same__For_example___tt_0001_AND_0001__tt__is_not_zero__but__tt_0001_AND_0010__tt__is_zero__1yEj2e">"Der &lt;tt>BIT&lt;/tt>-Opcode ist ähnlich wie &lt;tt>AND&lt;/tt>, aber die Berechnung wird nur verwendet, um das Zero-Flag zu setzen - das eigentliche Ergebnis wird verworfen. Das Zero-Flag wird nur gesetzt, wenn das Ergebnis der UND-Verknüpfung des Akkumulators mit dem Argument Null ist. Wenn wir Zweierpotenzen betrachten, wird das Zero-Flag nur gesetzt, wenn die beiden Zahlen nicht gleich sind. Zum Beispiel ist &lt;tt>0001 AND 0001&lt;/tt> nicht Null, aber &lt;tt>0001 AND 0010&lt;/tt> ist Null."</string>
  <string name="_As_stated_before__the_four_directions_are_represented_internally_by_the_numbers_1__2__4_and_8__Each_of_these_numbers_is_a_power_of_2__thus_they_are_represented_by_a_binary_number_with_a_single__tt_1__tt___Z1HFz7b">"Wie bereits erwähnt, werden die vier Richtungen intern durch die Zahlen 1, 2, 4 und 8 dargestellt. Jede dieser Zahlen ist eine Zweierpotenz, daher werden sie durch eine Binärzahl mit einer einzigen &lt;tt>1&lt;/tt> dargestellt:"</string>
  <string name="_Each_section___tt_upKey__tt____tt_rightKey__tt___etc___first_checks_to_see_if_the_current_direction_is_the_opposite_of_the_new_direction__This_requires_another_little_detour__xCRxF">"Jeder Abschnitt (&lt;tt>upKey&lt;/tt>, &lt;tt>rightKey&lt;/tt>, usw.) überprüft zuerst, ob die aktuelle Richtung die entgegengesetzte der neuen Richtung ist. Dies erfordert einen weiteren kleinen Umweg."</string>
  <string name="_Additional_button_inputs_are_also_available__button_A__Enter_Return_key__ASCII_code__tt__0D__tt___and_button_B__Space_key__ASCII_code__tt__20__tt____These_can_be_used_to_add_more_interaction_to_your_games__For_directional_controls__both_WASD_keys_and_arrow_keys_can_be_used_interchangeably__1R39Hg">"Zusätzliche Tasteneingaben sind ebenfalls verfügbar: Taste A (Eingabe/Return-Taste, ASCII-Code &lt;tt>$0D&lt;/tt>) und Taste B (Leertaste, ASCII-Code &lt;tt>$20&lt;/tt>). Diese können genutzt werden, um mehr Interaktion zu deinen Spielen hinzuzufügen. Für die Richtungssteuerung können sowohl WASD-Tasten als auch Pfeiltasten austauschbar verwendet werden."</string>
  <string name="_The_first_subroutine___tt_readKeys__tt___takes_the_job_of_accepting_user_input__The_memory_location__tt__ff__tt__holds_the_ascii_code_of_the_most_recent_key_press_in_this_simulator__The_value_is_loaded_into_the_accumulator__then_compared_to__tt__77__tt___the_hex_code_for_W____tt__64__tt___D____tt__73__tt___S__and__tt__61__tt___A___If_any_of_these_comparisons_are_successful__the_program_branches_to_the_appropriate_section__Z1i3fK9">"Das erste Unterprogramm, &lt;tt>readKeys&lt;/tt>, übernimmt die Aufgabe, Benutzereingaben anzunehmen. Die Speicheradresse &lt;tt>$ff&lt;/tt> enthält den ASCII-Code des letzten Tastendrucks in diesem Simulator. Der Wert wird in den Akkumulator geladen und dann mit &lt;tt>$77&lt;/tt> (dem Hexcode für W), &lt;tt>$64&lt;/tt> (D), &lt;tt>$73&lt;/tt> (S) und &lt;tt>$61&lt;/tt> (A) verglichen. Wenn einer dieser Vergleiche erfolgreich ist, verzweigt das Programm zum entsprechenden Abschnitt."</string>
  <string name="_Reading_the_input_SprBM">"Die Eingabe lesen"</string>
  <string name="_Nearly_all_games_have_at_their_heart_a_game_loop__All_game_loops_have_the_same_basic_form__accept_user_input__update_the_game_state__and_render_the_game_state__This_loop_is_no_different__Z1HgbOy">"Fast alle Spiele haben in ihrem Kern eine Spielschleife. Alle Spielschleifen haben die gleiche Grundform: Benutzereingaben annehmen, den Spielzustand aktualisieren und den Spielzustand darstellen. Diese Schleife ist da keine Ausnahme."</string>
  <string name="_The_game_loop_Zzq7qT">"Die Spielschleife"</string>
  <string name="_The_result_of_this_subroutine_is_to_load_a_random_byte_into__tt__00__tt___and_a_random_number_between_2_and_5_into__tt__01__tt___Because_the_least_significant_byte_comes_first_with_indirect_addressing__this_translates_into_a_memory_address_between__tt__0200__tt__and__tt__05ff__tt___the_exact_range_used_to_draw_the_display__Z1uLCIm">"Das Ergebnis dieses Unterprogramms ist, ein zufälliges Byte in &lt;tt>$00&lt;/tt> und eine Zufallszahl zwischen 2 und 5 in &lt;tt>$01&lt;/tt> zu laden. Da das niedrigstwertige Byte bei indirekter Adressierung zuerst kommt, übersetzt sich dies in eine Speicheradresse zwischen &lt;tt>$0200&lt;/tt> und &lt;tt>$05ff&lt;/tt>: genau der Bereich, der zum Zeichnen des Displays verwendet wird."</string>
  <string name="_After_this__the_value__tt_2__tt__is_added_to_the_accumulator__to_create_a_final_random_number_in_the_range_2_5__Zr1YTv">"Danach wird der Wert &lt;tt>2&lt;/tt> zum Akkumulator addiert, um eine endgültige Zufallszahl im Bereich 2-5 zu erzeugen."</string>
  <string name="_The_effect_of_this_is_to_mask_out_the_least_significant_two_bits_of_the_accumulator__setting_the_others_to_zero__This_converts_a_number_in_the_range_of_0_255_to_a_number_in_the_range_of_0_3__Z1eHVja">"Die Wirkung davon ist, die zwei niedrigstwertigen Bits des Akkumulators zu maskieren und die anderen auf Null zu setzen. Dies konvertiert eine Zahl im Bereich von 0-255 in eine Zahl im Bereich von 0-3."</string>
  <string name="_The_hex_value__tt__03__tt__is_represented_in_binary_as__tt_00000011__tt___The__tt_AND__tt__opcode_performs_a_bitwise_AND_of_the_argument_with_the_accumulator__For_example__if_the_accumulator_contains_the_binary_value__tt_10101010__tt___then_the_result_of__tt_AND__tt__with__tt_00000011__tt__will_be__tt_00000010__tt___10GFpK">"Der Hexadezimalwert &lt;tt>$03&lt;/tt> wird binär als &lt;tt>00000011&lt;/tt> dargestellt. Der &lt;tt>AND&lt;/tt>-Opcode führt eine bitweise UND-Verknüpfung des Arguments mit dem Akkumulator durch. Wenn zum Beispiel der Akkumulator den binären Wert &lt;tt>10101010&lt;/tt> enthält, dann wird das Ergebnis von &lt;tt>AND&lt;/tt> mit &lt;tt>00000011&lt;/tt> &lt;tt>00000010&lt;/tt> sein."</string>
  <string name="_The_next_subroutine___tt_generateApplePosition__tt___sets_the_apple_location_to_a_random_position_on_the_display__First__it_loads_a_random_byte_into_the_accumulator___tt__fe__tt__is_a_random_number_generator_in_this_simulator___This_is_stored_into__tt__00__tt___Next__a_different_random_byte_is_loaded_into_the_accumulator__which_is_then__tt_AND__tt__ed_with_the_value__tt__03__tt___This_part_requires_a_bit_of_a_detour__1WSyYq">"Das nächste Unterprogramm, &lt;tt>generateApplePosition&lt;/tt>, setzt die Apfelposition auf eine zufällige Position auf dem Display. Zuerst lädt es ein zufälliges Byte in den Akkumulator (&lt;tt>$fe&lt;/tt> ist ein Zufallszahlengenerator in diesem Simulator). Dies wird in &lt;tt>$00&lt;/tt> gespeichert. Als nächstes wird ein anderes zufälliges Byte in den Akkumulator geladen, das dann mit dem Wert &lt;tt>$03&lt;/tt> &lt;tt>AND&lt;/tt>-verknüpft wird. Dieser Teil erfordert einen kleinen Umweg."</string>
  <string name="_which_represents_the_indirectly_addressed_memory_locations__tt__0411__tt____tt__0410__tt__and__tt__040f__tt___three_pixels_in_the_middle_of_the_display___I_m_labouring_this_point__but_it_s_important_to_fully_grok_how_indirect_addressing_works__1Bk9KE">"was die indirekt adressierten Speicheradressen &lt;tt>$0411&lt;/tt>, &lt;tt>$0410&lt;/tt> und &lt;tt>$040f&lt;/tt> repräsentiert (drei Pixel in der Mitte des Displays). Ich betone diesen Punkt, aber es ist wichtig, vollständig zu verstehen, wie indirekte Adressierung funktioniert."</string>
  <string name="_This_loads_the_value__tt__11__tt__into_the_memory_location__tt__10__tt___the_value__tt__10__tt__into__tt__12__tt___and__tt__0f__tt__into__tt__14__tt___It_then_loads_the_value__tt__04__tt__into__tt__11__tt____tt__13__tt__and__tt__15__tt___This_leads_to_memory_like_this__1IOPr0">"Dies lädt den Wert &lt;tt>$11&lt;/tt> in die Speicheradresse &lt;tt>$10&lt;/tt>, den Wert &lt;tt>$10&lt;/tt> in &lt;tt>$12&lt;/tt> und &lt;tt>$0f&lt;/tt> in &lt;tt>$14&lt;/tt>. Dann lädt es den Wert &lt;tt>$04&lt;/tt> in &lt;tt>$11&lt;/tt>, &lt;tt>$13&lt;/tt> und &lt;tt>$15&lt;/tt>. Dies führt zu Speicher wie diesem:"</string>
  <string name="_The__tt_init__tt__subroutine_defers_to_two_subroutines___tt_initSnake__tt__and__tt_generateApplePosition__tt____tt_initSnake__tt__sets_the_snake_direction__length__and_then_loads_the_initial_memory_locations_of_the_snake_head_and_body__The_byte_pair_at__tt__10__tt__contains_the_screen_location_of_the_head__the_pair_at__tt__12__tt__contains_the_location_of_the_single_body_segment__and__tt__14__tt__contains_the_location_of_the_tail__the_tail_is_the_last_segment_of_the_body_and_is_drawn_in_black_to_keep_the_snake_moving___This_happens_in_the_following_code__kzjHF">"Die &lt;tt>init&lt;/tt>-Subroutine ruft zwei weitere Subroutinen auf: &lt;tt>initSnake&lt;/tt> und &lt;tt>generateApplePosition&lt;/tt>. &lt;tt>initSnake&lt;/tt> legt die Richtung und Länge der Schlange fest und lädt dann die initialen Speicherpositionen für Kopf und Körper. Das Bytepaar bei &lt;tt>$10&lt;/tt> enthält die Bildschirmposition des Kopfes, das Paar bei &lt;tt>$12&lt;/tt> die Position des Körpersegments und &lt;tt>$14&lt;/tt> die Position des Schwanzes (der Schwanz ist das letzte Segment des Körpers und wird schwarz dargestellt, damit die Bewegung der Schlange sichtbar wird). Dies geschieht im folgenden Code:"</string>
  <string name="Initialization">"Initialisierung"</string>
  <string name="_Finally__byte__tt__03__tt__contains_the_current_length_of_the_snake__in_terms_of_bytes_in_memory__so_a_length_of_4_means_2_pixels___Z2l4973">"Schließlich enthält Byte &lt;tt>$03&lt;/tt> die aktuelle Länge der Schlange, gemessen in Bytes im Speicher (eine Länge von 4 bedeutet also 2 Pixel)."</string>
  <string name="_The_first_two_bytes_hold_the_location_of_the_apple__This_is_updated_every_time_the_snake_eats_the_apple__Byte__tt__02__tt__contains_the_current_direction___tt_1__tt__means_up___tt_2__tt__right___tt_4__tt__down__and__tt_8__tt__left__The_reasoning_behind_these_numbers_will_become_clear_later__j9eUk">"Die ersten zwei Bytes enthalten die Position des Apfels. Diese wird jedes Mal aktualisiert, wenn die Schlange den Apfel frisst. Byte &lt;tt>$02&lt;/tt> enthält die aktuelle Richtung. &lt;tt>1&lt;/tt> bedeutet nach oben, &lt;tt>2&lt;/tt> nach rechts, &lt;tt>4&lt;/tt> nach unten und &lt;tt>8&lt;/tt> nach links. Die Logik hinter diesen Zahlen wird später klar werden."</string>
  <string name="_The_zero_page_of_memory_is_used_to_store_a_number_of_game_state_variables__as_noted_in_the_comment_block_at_the_top_of_the_game__Everything_in__tt__00__tt____tt__01__tt__and__tt__10__tt__upwards_is_a_pair_of_bytes_representing_a_two_byte_memory_location_that_will_be_looked_up_using_indirect_addressing__These_memory_locations_will_all_be_between__tt__0200__tt__and__tt__05ff__tt____the_section_of_memory_corresponding_to_the_game_console__For_example__if__tt__00__tt__and__tt__01__tt__contained_the_values__tt__01__tt__and__tt__02__tt___they_would_be_referring_to_the_second_pixel_of_the_display____tt__0201__tt____remember__the_least_significant_byte_comes_first_in_indirect_addressing___Z1Mxgue">"Die Zero Page wird verwendet, um verschiedene Spielzustandsvariablen zu speichern, wie im Kommentarblock am Anfang des Spiels beschrieben. Die Bereiche &lt;tt>$00&lt;/tt>, &lt;tt>$01&lt;/tt> und ab &lt;tt>$10&lt;/tt> aufwärts enthalten jeweils Bytepaare, die eine 2-Byte-Speicheradresse darstellen und über Indirect Addressing nachgeschlagen werden. Diese Speicheradressen liegen alle zwischen &lt;tt>$0200&lt;/tt> und &lt;tt>$05ff&lt;/tt> - dem Speicherbereich des Spielkonsolen-Displays. Wenn zum Beispiel &lt;tt>$00&lt;/tt> und &lt;tt>$01&lt;/tt> die Werte &lt;tt>$01&lt;/tt> und &lt;tt>$02&lt;/tt> enthalten, verweisen sie auf das zweite Pixel des Displays (&lt;tt>$0201&lt;/tt> - beachte, dass bei Indirect Addressing das Least Significant Byte zuerst kommt)."</string>
  <string name="_Zero_page_usage_ZTjfXs">"Verwendung der Nullseite"</string>
  <string name="_First___tt_readkeys__tt__checks_to_see_if_one_of_the_direction_keys__W__A__S__D__was_pressed__and_if_so__sets_the_direction_of_the_snake_accordingly__Then___tt_checkCollision__tt__checks_to_see_if_the_snake_collided_with_itself_or_the_apple___tt_updateSnake__tt__updates_the_internal_representation_of_the_snake__based_on_its_direction__Next__the_apple_and_snake_are_drawn__Finally___tt_spinWheels__tt__makes_the_processor_do_some_busy_work__to_stop_the_game_from_running_too_quickly__Think_of_it_like_a_sleep_command__The_game_keeps_running_until_the_snake_collides_with_the_wall_or_itself__zWng5">"Zuerst überprüft &lt;tt>readkeys&lt;/tt>, ob eine der Richtungstasten (W, A, S, D) gedrückt wurde, und setzt entsprechend die Richtung der Schlange. Dann überprüft &lt;tt>checkCollision&lt;/tt>, ob die Schlange mit sich selbst oder dem Apfel kollidiert ist. &lt;tt>updateSnake&lt;/tt> aktualisiert die interne Darstellung der Schlange basierend auf ihrer Richtung. Als nächstes werden der Apfel und die Schlange gezeichnet. Schließlich lässt &lt;tt>spinWheels&lt;/tt> den Prozessor etwas Leerlaufarbeit machen, damit das Spiel nicht zu schnell läuft. Denk daran wie an einen Sleep-Befehl. Das Spiel läuft weiter, bis die Schlange mit der Wand oder sich selbst kollidiert."</string>
  <string name="_The__tt_loop__tt__subroutine_itself_just_calls_a_number_of_subroutines_sequentially__before_looping_back_on_itself__ZlPKn1">"Das &lt;tt>loop&lt;/tt>-Unterprogramm selbst ruft nur eine Reihe von Unterprogrammen nacheinander auf, bevor es zu sich selbst zurückkehrt:"</string>
  <string name="__tt_init__tt__and__tt_loop__tt__are_both_subroutines___tt_init__tt__initializes_the_game_state__and__tt_loop__tt__is_the_main_game_loop__Z1xARaG">"&lt;tt>init&lt;/tt> und &lt;tt>loop&lt;/tt> sind beide Unterprogramme. &lt;tt>init&lt;/tt> initialisiert den Spielzustand, und &lt;tt>loop&lt;/tt> ist die Hauptspielschleife."</string>
  <string name="_After_the_initial_block_of_comments__lines_starting_with_semicolons___the_first_two_lines_are__1vdOA4">"Nach dem anfänglichen Block von Kommentaren (Zeilen, die mit Semikolons beginnen), sind die ersten beiden Zeilen:"</string>
  <string name="_Overall_structure_ZusHhC">"Gesamtstruktur"</string>
  <string name="__a_href__https___twitter_com_wkjagt__Willem_van_der_Jagt__a__made_a__a_href__https___gist_github_com_wkjagt_9043907__fully_annotated_gist_of_this_source_code__a___so_follow_along_with_that_for_more_details__Z1NzI9r">"&lt;a href=\"https://twitter.com/wkjagt\">Willem van der Jagt&lt;/a> hat einen &lt;a href=\"https://gist.github.com/wkjagt/9043907\">vollständig kommentierten Gist dieses Quellcodes&lt;/a> erstellt, folge diesem für weitere Details."</string>
  <string name="_The_code_block_below_contains_the_entire_source_code_of_the_game__I_ll_explain_how_it_works_in_the_following_sections__Zu8356">"Der Code-Block unten enthält den gesamten Quellcode des Spiels. Ich werde in den folgenden Abschnitten erklären, wie es funktioniert."</string>
  <string name="_Here_s_an_example__Note_that_immediate_operands_are_still_prefixed_with_a__tt____tt___1sGb3O">"Hier ist ein Beispiel. Beachte, dass unmittelbare Operanden immer noch mit einem &lt;tt>#&lt;/tt> beginnen."</string>
  <string name="_In_this_assembler__we_can_define_descriptive_constants__or_symbols__that_represent_numbers__The_rest_of_the_code_can_then_simply_use_the_constants_instead_of_the_literal_number__which_immediately_makes_it_obvious_what_we_re_dealing_with__You_can_use_letters__digits_and_underscores_in_a_name__g40qd">"In diesem Assembler können wir beschreibende Konstanten (oder Symbole) definieren, die Zahlen repräsentieren. Der restliche Code kann dann einfach die Konstanten anstelle der wörtlichen Zahl verwenden, was sofort deutlich macht, womit wir es zu tun haben. Du kannst Buchstaben, Ziffern und Unterstriche in einem Namen verwenden."</string>
  <string name="_Even_though_this_will_be_a_simple_version__the_code_will_be_substantially_larger_than_all_the_previous_examples__We_will_need_to_keep_track_of_several_memory_locations_together_for_the_various_aspects_of_the_game__We_can_still_do_the_necessary_bookkeeping_throughout_the_program_ourselves__as_before__but_on_a_larger_scale_that_quickly_becomes_tedious_and_can_also_lead_to_bugs_that_are_difficult_to_spot__Instead_we_ll_now_let_the_assembler_do_some_of_the_mundane_work_for_us__2qh2nK">"Auch wenn dies eine einfache Version sein wird, wird der Code wesentlich umfangreicher sein als alle bisherigen Beispiele. Wir müssen mehrere Speicheradressen für die verschiedenen Aspekte des Spiels im Auge behalten. Wir können die notwendige Buchführung im Programm immer noch selbst durchführen, wie zuvor, aber in größerem Umfang wird das schnell mühsam und kann auch zu schwer zu findenden Fehlern führen. Stattdessen lassen wir jetzt den Assembler einen Teil der alltäglichen Arbeit für uns erledigen."</string>
  <string name="_Now__let_s_put_all_this_knowledge_to_good_use__and_make_a_game__We_re_going_to_be_making_a_really_simple_version_of_the_classic_game__Snake___1oiFoS">"Jetzt lass uns all dieses Wissen gut nutzen und ein Spiel erstellen! Wir werden eine sehr einfache Version des klassischen Spiels \'Snake\' erstellen."</string>
  <string name="_Creating_a_game_Z2ijaAf">"Ein Spiel erstellen"</string>
  <string name="_The_first_instruction_causes_execution_to_jump_to_the__tt_init__tt__label__This_sets__tt_X__tt___then_returns_to_the_next_instruction___tt_JSR_loop__tt___This_jumps_to_the__tt_loop__tt__label__which_increments__tt_X__tt__until_it_is_equal_to__tt__05__tt___After_that_we_return_to_the_next_instruction___tt_JSR_end__tt___which_jumps_to_the_end_of_the_file__This_illustrates_how__tt_JSR__tt__and__tt_RTS__tt__can_be_used_together_to_create_modular_code__Z1EqroR">"Die erste Anweisung veranlasst die Ausführung zum &lt;tt>init&lt;/tt>-Label zu springen. Dies setzt &lt;tt>X&lt;/tt> und kehrt dann zur nächsten Anweisung zurück, &lt;tt>JSR loop&lt;/tt>. Dies springt zum &lt;tt>loop&lt;/tt>-Label, das &lt;tt>X&lt;/tt> erhöht, bis es gleich &lt;tt>$05&lt;/tt> ist. Danach kehren wir zur nächsten Anweisung zurück, &lt;tt>JSR end&lt;/tt>, die zum Ende der Datei springt. Dies zeigt, wie &lt;tt>JSR&lt;/tt> und &lt;tt>RTS&lt;/tt> zusammen verwendet werden können, um modularen Code zu erstellen."</string>
  <string name="_The_processor_knows_where_to_return_to_because__tt_JSR__tt__pushes_the_address_minus_one_of_the_next_instruction_onto_the_stack_before_jumping_to_the_given_location___tt_RTS__tt__pops_this_location__adds_one_to_it__and_jumps_to_that_location__An_example__ZksJm6">"Der Prozessor weiß, wohin er zurückkehren soll, weil &lt;tt>JSR&lt;/tt> die Adresse der nächsten Anweisung minus eins auf den Stack schiebt, bevor er zur angegebenen Position springt. &lt;tt>RTS&lt;/tt> nimmt diese Position vom Stack, addiert eins dazu und springt zu dieser Position. Ein Beispiel:"</string>
  <string name="__tt_JSR__tt__and__tt_RTS__tt____jump_to_subroutine__and__return_from_subroutine___are_a_dynamic_duo_that_you_ll_usually_see_used_together___tt_JSR__tt__is_used_to_jump_from_the_current_location_to_another_part_of_the_code___tt_RTS__tt__returns_to_the_previous_position__This_is_basically_like_calling_a_function_and_returning__budLU">"&lt;tt>JSR&lt;/tt> und &lt;tt>RTS&lt;/tt> (\"jump to subroutine\" und \"return from subroutine\") sind ein dynamisches Duo, das du normalerweise zusammen verwendet siehst. &lt;tt>JSR&lt;/tt> wird verwendet, um von der aktuellen Position zu einem anderen Teil des Codes zu springen. &lt;tt>RTS&lt;/tt> kehrt zur vorherigen Position zurück. Dies ist im Grunde wie ein Funktionsaufruf und die Rückkehr daraus."</string>
  <string name="_JSR_RTS_ZGEJDz">"JSR/RTS"</string>
  <string name="__tt_JMP__tt__is_an_unconditional_jump__Here_s_a_really_simple_example_to_show_it_in_action__220zvA">"&lt;tt>JMP&lt;/tt> ist ein unbedingter Sprung. Hier ist ein sehr einfaches Beispiel, um es in Aktion zu zeigen:"</string>
  <string name="JMP">"JMP"</string>
  <string name="_Jumping_is_like_branching_with_two_main_differences__First__jumps_are_not_conditionally_executed__and_second__they_take_a_two_byte_absolute_address__For_small_programs__this_second_detail_isn_t_very_important__as_you_ll_mostly_be_using_labels__and_the_assembler_works_out_the_correct_memory_location_from_the_label__For_larger_programs_though__jumping_is_the_only_way_to_move_from_one_section_of_the_code_to_another__gahBA">"Springen ist wie Verzweigen mit zwei Hauptunterschieden. Erstens werden Sprünge nicht bedingt ausgeführt, und zweitens verwenden sie eine zweibyte absolute Adresse. Für kleine Programme ist dieses zweite Detail nicht sehr wichtig, da du hauptsächlich Labels verwendest und der Assembler die korrekte Speicheradresse aus dem Label ermittelt. Für größere Programme ist Springen jedoch der einzige Weg, um von einem Codeabschnitt zu einem anderen zu gelangen."</string>
  <string name="Jumping">"Springen"</string>
  <string name="__tt_X__tt__holds_the_pixel_colour__and__tt_Y__tt__holds_the_position_of_the_current_pixel__The_first_loop_draws_the_current_colour_as_a_pixel__via_the__tt_A__tt__register___pushes_the_colour_to_the_stack__then_increments_the_colour_and_position__The_second_loop_pops_the_stack__draws_the_popped_colour_as_a_pixel__then_increments_the_position__As_should_be_expected__this_creates_a_mirrored_pattern__ZSPLKf">"&lt;tt>X&lt;/tt> enthält die Pixelfarbe und &lt;tt>Y&lt;/tt> enthält die Position des aktuellen Pixels. Die erste Schleife zeichnet die aktuelle Farbe als Pixel (über das &lt;tt>A&lt;/tt>-Register), schiebt die Farbe auf den Stack und erhöht dann die Farbe und Position. Die zweite Schleife nimmt die Farbe vom Stack, zeichnet die genommene Farbe als Pixel und erhöht dann die Position. Wie zu erwarten, erzeugt dies ein gespiegeltes Muster."</string>
  <string name="_Two_of_the_stack_instructions_are__tt_PHA__tt__and__tt_PLA__tt____push_accumulator__and__pull_accumulator___Below_is_an_example_of_these_two_in_action__Z1pQkxq">"Zwei der Stack-Anweisungen sind &lt;tt>PHA&lt;/tt> und &lt;tt>PLA&lt;/tt>, \"push accumulator\" und \"pull accumulator\". Unten ist ein Beispiel dieser beiden in Aktion."</string>
  <string name="_The_stack_in_a_6502_processor_is_just_like_any_other_stack___values_are_pushed_onto_it_and_popped___pulled__in_6502_parlance__off_it__The_current_depth_of_the_stack_is_measured_by_the_stack_pointer__a_special_register__The_stack_lives_in_memory_between__tt__0100__tt__and__tt__01ff__tt___The_stack_pointer_is_initially__tt__ff__tt___which_points_to_memory_location__tt__01ff__tt___When_a_byte_is_pushed_onto_the_stack__the_stack_pointer_becomes__tt__fe__tt___or_memory_location__tt__01fe__tt___and_so_on__ZVq7sO">"Der Stack in einem 6502-Prozessor ist wie jeder andere Stack - Werte werden darauf geschoben (gepusht) und davon genommen (\"gepullt\" in 6502-Sprache). Die aktuelle Tiefe des Stacks wird durch den Stack-Pointer gemessen, ein spezielles Register. Der Stack befindet sich im Speicher zwischen &lt;tt>$0100&lt;/tt> und &lt;tt>$01ff&lt;/tt>. Der Stack-Pointer ist anfangs &lt;tt>$ff&lt;/tt>, was auf die Speicheradresse &lt;tt>$01ff&lt;/tt> zeigt. Wenn ein Byte auf den Stack geschoben wird, wird der Stack-Pointer zu &lt;tt>$fe&lt;/tt>, oder Speicheradresse &lt;tt>$01fe&lt;/tt>, und so weiter."</string>
  <string name="_The_stack_ZcdwJ1">"Der Stack"</string>
  <string name="_Try_to_write_code_snippets_that_use_each_of_the_6502_addressing_modes__Remember__you_can_use_the_monitor_in_the_debugger_to_watch_a_section_of_memory__2adgHf">"Versuche Code-Beispiele zu schreiben, die jeden der 6502-Adressierungsmodi verwenden. Denk daran, dass du den Monitor im Debugger verwenden kannst, um einen Speicherbereich zu beobachten."</string>
  <string name="Exercise">"Übung"</string>
  <string name="_In_this_case___tt___01___tt__looks_up_the_two_bytes_at__tt__01__tt__and__tt__02__tt____tt__03__tt__and__tt__07__tt___These_form_the_address__tt__0703__tt___The_value_of_the__tt_Y__tt__register_is_added_to_this_address_to_give_the_final_address__tt__0704__tt___2bmnyL">"In diesem Fall schlägt &lt;tt>($01)&lt;/tt> die zwei Bytes bei &lt;tt>$01&lt;/tt> und &lt;tt>$02&lt;/tt> nach: &lt;tt>$03&lt;/tt> und &lt;tt>$07&lt;/tt>. Diese bilden die Adresse &lt;tt>$0703&lt;/tt>. Der Wert des &lt;tt>Y&lt;/tt>-Registers wird zu dieser Adresse addiert, um die endgültige Adresse &lt;tt>$0704&lt;/tt> zu erhalten."</string>
  <string name="_Indirect_indexed_is_like_indexed_indirect_but_less_insane__Instead_of_adding_the__tt_X__tt__register_to_the_address__i_before__i__dereferencing__the_zero_page_address_is_dereferenced__and_the__tt_Y__tt__register_is_added_to_the_resulting_address__1JNMfd">"Indirekt indiziert ist wie indiziert indirekt, aber weniger verrückt. Anstatt das &lt;tt>X&lt;/tt>-Register &lt;i>vor&lt;/i> dem Dereferenzieren zur Adresse zu addieren, wird die Nullseiten-Adresse dereferenziert und das &lt;tt>Y&lt;/tt>-Register zur resultierenden Adresse addiert."</string>
  <string name="_Indirect_indexed___tt___c0__Y__tt__2iHagU">"Indirekt indiziert: &lt;tt>($c0),Y&lt;/tt>"</string>
  <string name="_Memory_locations__tt__01__tt__and__tt__02__tt__contain_the_values__tt__05__tt__and__tt__07__tt__respectively__Think_of__tt___00_X___tt__as__tt___00___X___tt___In_this_case__tt_X__tt__is__tt__01__tt___so_this_simplifies_to__tt___01___tt___From_here_things_proceed_like_standard_indirect_addressing___the_two_bytes_at__tt__01__tt__and__tt__02__tt____tt__05__tt__and__tt__07__tt___are_looked_up_to_form_the_address__tt__0705__tt___This_is_the_address_that_the__tt_Y__tt__register_was_stored_into_in_the_previous_instruction__so_the__tt_A__tt__register_gets_the_same_value_as__tt_Y__tt___albeit_through_a_much_more_circuitous_route__You_won_t_see_this_much__2sCLPk">"Die Speicheradressen &lt;tt>$01&lt;/tt> und &lt;tt>$02&lt;/tt> enthalten die Werte &lt;tt>$05&lt;/tt> bzw. &lt;tt>$07&lt;/tt>. Denke an &lt;tt>($00,X)&lt;/tt> als &lt;tt>($00 + X)&lt;/tt>. In diesem Fall ist &lt;tt>X&lt;/tt> gleich &lt;tt>$01&lt;/tt>, also vereinfacht sich das zu &lt;tt>($01)&lt;/tt>. Von hier aus läuft es wie bei der standardmäßigen indirekten Adressierung - die zwei Bytes bei &lt;tt>$01&lt;/tt> und &lt;tt>$02&lt;/tt> (&lt;tt>$05&lt;/tt> und &lt;tt>$07&lt;/tt>) werden nachgeschlagen, um die Adresse &lt;tt>$0705&lt;/tt> zu bilden. Dies ist die Adresse, in die das &lt;tt>Y&lt;/tt>-Register in der vorherigen Anweisung gespeichert wurde, sodass das &lt;tt>A&lt;/tt>-Register den gleichen Wert wie &lt;tt>Y&lt;/tt> erhält, wenn auch auf einem viel umständlicheren Weg. Das wirst du nicht oft sehen."</string>
  <string name="_This_one_s_kinda_weird__It_s_like_a_cross_between_zero_page_X_and_indirect__Basically__you_take_the_zero_page_address__add_the_value_of_the__tt_X__tt__register_to_it__then_use_that_to_look_up_a_two_byte_address__For_example__1uXsJG">"Diese ist etwas seltsam. Es ist wie eine Kreuzung zwischen Nullseite,X und indirekt. Im Grunde nimmst du die Nullseiten-Adresse, addierst den Wert des &lt;tt>X&lt;/tt>-Registers dazu und verwendest das dann, um eine zweibyte-Adresse nachzuschlagen. Zum Beispiel:"</string>
  <string name="_Indexed_indirect___tt___c0_X___tt__ZoAJfM">"Indiziert indirekt: &lt;tt>($c0,X)&lt;/tt>"</string>
  <string name="_In_this_example___tt__f0__tt__contains_the_value__tt__01__tt__and__tt__f1__tt__contains_the_value__tt__cc__tt___The_instruction__tt_JMP___f0___tt__causes_the_processor_to_look_up_the_two_bytes_at__tt__f0__tt__and__tt__f1__tt____tt__01__tt__and__tt__cc__tt___and_put_them_together_to_form_the_address__tt__cc01__tt___which_becomes_the_new_program_counter__Assemble_and_step_through_the_program_above_to_see_what_happens__I_ll_talk_more_about__tt_JMP__tt__in_the_section_on__a_href___jumping__Jumping__a___16nYD2">"In diesem Beispiel enthält &lt;tt>$f0&lt;/tt> den Wert &lt;tt>$01&lt;/tt> und &lt;tt>$f1&lt;/tt> enthält den Wert &lt;tt>$cc&lt;/tt>. Die Anweisung &lt;tt>JMP ($f0)&lt;/tt> veranlasst den Prozessor, die zwei Bytes bei &lt;tt>$f0&lt;/tt> und &lt;tt>$f1&lt;/tt> (&lt;tt>$01&lt;/tt> und &lt;tt>$cc&lt;/tt>) nachzuschlagen und sie zur Adresse &lt;tt>$cc01&lt;/tt> zusammenzufügen, die dann zum neuen Programmzähler wird. Assembliere und gehe das obige Programm schrittweise durch, um zu sehen, was passiert. Ich werde mehr über &lt;tt>JMP&lt;/tt> im Abschnitt über &lt;a href=\"#jumping\">Springen&lt;/a> sprechen."</string>
  <string name="_Indirect_addressing_uses_an_absolute_address_to_look_up_another_address__The_first_address_gives_the_least_significant_byte_of_the_address__and_the_following_byte_gives_the_most_significant_byte__That_can_be_hard_to_wrap_your_head_around__so_here_s_an_example__Z2kYakf">"Indirekte Adressierung verwendet eine absolute Adresse, um eine andere Adresse nachzuschlagen. Die erste Adresse liefert das niedrigstwertige Byte der Adresse, und das folgende Byte liefert das höchstwertige Byte. Das kann schwer zu verstehen sein, hier ist ein Beispiel:"</string>
  <string name="_Indirect___tt___c000___tt__1fNdE3">"Indirekt: &lt;tt>($c000)&lt;/tt>"</string>
  <string name="_Some_instructions_don_t_deal_with_memory_locations__e_g___tt_INX__tt____increment_the__tt_X__tt__register___These_are_said_to_have_implicit_addressing___the_argument_is_implied_by_the_instruction__ZE5a5v">"Einige Anweisungen arbeiten nicht mit Speicheradressen (z.B. &lt;tt>INX&lt;/tt> - inkrementiere das &lt;tt>X&lt;/tt>-Register). Diese haben eine implizite Adressierung - das Argument ergibt sich aus der Anweisung selbst."</string>
  <string name="Implicit">"Implizit"</string>
  <string name="__tt_a9__tt__and__tt_c9__tt__are_the_processor_opcodes_for_immediate_addressed__tt_LDA__tt__and__tt_CMP__tt__respectively___tt_01__tt__and__tt_02__tt__are_the_arguments_to_these_instructions___tt_d0__tt__is_the_opcode_for__tt_BNE__tt___and_its_argument_is__tt_02__tt___This_means__skip_over_the_next_two_bytes____tt_85_22__tt___the_assembled_version_of__tt_STA__22__tt____Try_editing_the_code_so__tt_STA__tt__takes_a_two_byte_absolute_address_rather_than_a_single_byte_zero_page_address__e_g__change__tt_STA__22__tt__to__tt_STA__2222__tt____Reassemble_the_code_and_look_at_the_hexdump_again___the_argument_to__tt_BNE__tt__should_now_be__tt_03__tt___because_the_instruction_the_processor_is_skipping_past_is_now_three_bytes_long__ZkNEKa">"&lt;tt>a9&lt;/tt> und &lt;tt>c9&lt;/tt> sind die Prozessor-Opcodes für unmittelbar adressierte &lt;tt>LDA&lt;/tt> und &lt;tt>CMP&lt;/tt>. &lt;tt>01&lt;/tt> und &lt;tt>02&lt;/tt> sind die Argumente für diese Anweisungen. &lt;tt>d0&lt;/tt> ist der Opcode für &lt;tt>BNE&lt;/tt>, und sein Argument ist &lt;tt>02&lt;/tt>. Dies bedeutet \"überspringe die nächsten zwei Bytes\" (&lt;tt>85 22&lt;/tt>, die assemblierte Version von &lt;tt>STA $22&lt;/tt>). Versuche den Code so zu ändern, dass &lt;tt>STA&lt;/tt> eine zweibyte absolute Adresse anstelle einer einbyte Nullseiten-Adresse verwendet (z.B. ändere &lt;tt>STA $22&lt;/tt> zu &lt;tt>STA $2222&lt;/tt>). Assembliere den Code neu und schaue dir den Hexdump erneut an - das Argument für &lt;tt>BNE&lt;/tt> sollte jetzt &lt;tt>03&lt;/tt> sein, weil die Anweisung, die der Prozessor überspringt, jetzt drei Bytes lang ist."</string>
  <string name="_The_hex_should_look_something_like_this__dVOFw">"Der Hexadezimalcode sollte etwa so aussehen:"</string>
  <string name="_Assemble_the_following_code__then_check_the_debugger_to_see_the_hexdump_of_the_assembled_code__ZQhThM">"Assembliere den folgenden Code und schaue dann im Debugger, um den Hexdump des assemblierten Codes zu sehen."</string>
  <string name="_Relative_addressing_is_used_for_branching_instructions__These_instructions_take_a_single_byte__which_is_used_as_an_offset_from_the_following_instruction__ZirGaK">"Relative Adressierung wird für Verzweigungsanweisungen verwendet. Diese Anweisungen nehmen ein einzelnes Byte, das als Offset von der folgenden Anweisung verwendet wird."</string>
  <string name="_Relative___tt__c0__tt___or_label__Z1fuyzp">"Relativ: &lt;tt>$c0&lt;/tt> (oder Label)"</string>
  <string name="_Immediate_addressing_doesn_t_strictly_deal_with_memory_addresses___this_is_the_mode_where_actual_values_are_used__For_example___tt_LDX___01__tt__loads_the_value__tt__01__tt__into_the__tt_X__tt__register__This_is_very_different_to_the_zero_page_instruction__tt_LDX__01__tt__which_loads_the_value_at_memory_location__tt__01__tt__into_the__tt_X__tt__register__1Wlq49">"Die unmittelbare Adressierung beschäftigt sich nicht direkt mit Speicheradressen - dies ist der Modus, in dem tatsächliche Werte verwendet werden. Zum Beispiel lädt &lt;tt>LDX #$01&lt;/tt> den Wert &lt;tt>$01&lt;/tt> in das &lt;tt>X&lt;/tt>-Register. Dies unterscheidet sich deutlich von der Nullseiten-Anweisung &lt;tt>LDX $01&lt;/tt>, die den Wert an der Speicheradresse &lt;tt>$01&lt;/tt> in das &lt;tt>X&lt;/tt>-Register lädt."</string>
  <string name="_Immediate___tt___c0__tt__ZNtJ7a">"Unmittelbar: &lt;tt>#$c0&lt;/tt>"</string>
  <string name="_Unlike_zero_page_Y__absolute_Y_can_t_be_used_with__tt_STX__tt__but_can_be_used_with__tt_LDA__tt__and__tt_STA__tt___150tMJ">"Im Gegensatz zu Nullseite,Y kann absolut,Y nicht mit &lt;tt>STX&lt;/tt> verwendet werden, aber mit &lt;tt>LDA&lt;/tt> und &lt;tt>STA&lt;/tt>."</string>
  <string name="_These_are_the_absolute_addressing_versions_of_zero_page_X_and_zero_page_Y__For_example__Z1Qoxsw">"Dies sind die absoluten Adressierungsversionen von Nullseite,X und Nullseite,Y. Zum Beispiel:"</string>
  <string name="_Absolute_X_and_absolute_Y___tt__c000_X__tt__and__tt__c000_Y__tt__1nLeDg">"Absolut,X und absolut,Y: &lt;tt>$c000,X&lt;/tt> und &lt;tt>$c000,Y&lt;/tt>"</string>
  <string name="_This_is_the_equivalent_of_zero_page_X__but_can_only_be_used_with__tt_LDX__tt__and__tt_STX__tt___2hg8gp">"Dies ist das Äquivalent zu Nullseite,X, kann aber nur mit &lt;tt>LDX&lt;/tt> und &lt;tt>STX&lt;/tt> verwendet werden."</string>
  <string name="_Zero_page_Y___tt__c0_Y__tt__ZMkdzT">"Nullseite,Y: &lt;tt>$c0,Y&lt;/tt>"</string>
  <string name="_If_the_result_of_the_addition_is_larger_than_a_single_byte__the_address_wraps_around__For_example__eoaFV">"Wenn das Ergebnis der Addition größer als ein einzelnes Byte ist, wird die Adresse umgebrochen. Zum Beispiel:"</string>
  <string name="_This_is_where_addressing_gets_interesting__In_this_mode__a_zero_page_address_is_given__and_then_the_value_of_the__tt_X__tt__register_is_added__Here_is_an_example__WPINk">"Hier wird die Adressierung interessant. In diesem Modus wird eine Nullseiten-Adresse angegeben und dann der Wert des &lt;tt>X&lt;/tt>-Registers hinzuaddiert. Hier ist ein Beispiel:"</string>
  <string name="_Zero_page_X___tt__c0_X__tt__Z2q8yG7">"Nullseite,X: &lt;tt>$c0,X&lt;/tt>"</string>
  <string name="_All_instructions_that_support_absolute_addressing__with_the_exception_of_the_jump_instructions__also_have_the_option_to_take_a_single_byte_address__This_type_of_addressing_is_called__zero_page____only_the_first_page__the_first_256_bytes__of_memory_is_accessible__This_is_faster__as_only_one_byte_needs_to_be_looked_up__and_takes_up_less_space_in_the_assembled_code_as_well__29V56k">"Alle Anweisungen, die absolute Adressierung unterstützen (mit Ausnahme der Sprunganweisungen), haben auch die Möglichkeit, eine einbyte-Adresse zu verwenden. Diese Art der Adressierung wird \"Nullseite\" genannt - nur die erste Seite (die ersten 256 Bytes) des Speichers ist zugänglich. Dies ist schneller, da nur ein Byte nachgeschlagen werden muss, und nimmt auch weniger Platz im assemblierten Code ein."</string>
  <string name="_Zero_page___tt__c0__tt__ZjpTNX">"Nullseite: &lt;tt>$c0&lt;/tt>"</string>
  <string name="_With_absolute_addressing__the_full_memory_location_is_used_as_the_argument_to_the_instruction__For_example__XFGyT">"Bei der absoluten Adressierung wird die vollständige Speicheradresse als Argument für die Anweisung verwendet. Zum Beispiel:"</string>
  <string name="_Absolute___tt__c000__tt__13v4PP">"Absolut: &lt;tt>$c000&lt;/tt>"</string>
  <string name="_With_all_these_examples_you_might_find_it_helpful_to_use_the_memory_monitor_in_the_debugger_to_watch_the_memory_change__The_monitor_takes_a_starting_memory_location_and_a_number_of_bytes_to_display_from_that_location__Both_of_these_are_hex_values__For_example__to_display_16_bytes_of_memory_from__tt__c000__tt___enter__tt_c000__tt__and__tt_10__tt__into__b_Start__b__and__b_Length__b___respectively__1f5dIX">"Bei all diesen Beispielen kann es hilfreich sein, den Speicher-Monitor im Debugger zu verwenden, um die Änderungen im Speicher zu beobachten. Der Monitor benötigt eine Startadresse und die Anzahl der Bytes, die von dieser Position angezeigt werden sollen. Beide Werte sind Hexadezimalzahlen. Um zum Beispiel 16 Bytes Speicher ab &lt;tt>$c000&lt;/tt> anzuzeigen, gib &lt;tt>c000&lt;/tt> und &lt;tt>10&lt;/tt> in die Felder &lt;b>Start&lt;/b> bzw. &lt;b>Länge&lt;/b> ein."</string>
  <string name="_The_6502_uses_a_16_bit_address_bus__meaning_that_there_are_65536_bytes_of_memory_available_to_the_processor__Remember_that_a_byte_is_represented_by_two_hex_characters__so_the_memory_locations_are_generally_represented_as__tt__0000____ffff__tt___There_are_various_ways_to_refer_to_these_memory_locations__as_detailed_below__ZnJlF5">"Der 6502 verwendet einen 16-Bit-Adressbus, was bedeutet, dass dem Prozessor 65536 Bytes Speicher zur Verfügung stehen. Denk daran, dass ein Byte durch zwei Hex-Zeichen dargestellt wird, sodass die Speicheradressen im Allgemeinen als &lt;tt>$0000 - $ffff&lt;/tt> dargestellt werden. Es gibt verschiedene Möglichkeiten, sich auf diese Speicheradressen zu beziehen, wie unten beschrieben."</string>
  <string name="_Addressing_modes_2fSYBa">"Adressierungsmodi"</string>
  <string name="__tt_BCC__tt__and__tt_BCS__tt____branch_on_carry_clear__and__branch_on_carry_set___are_used_to_branch_on_the_carry_flag__Write_a_program_that_uses_one_of_these_two__Z2bj482">"&lt;tt>BCC&lt;/tt> und &lt;tt>BCS&lt;/tt> (\"branch on carry clear\" und \"branch on carry set\") werden verwendet, um abhängig vom Carry-Flag zu verzweigen. Schreibe ein Programm, das eine dieser beiden Anweisungen verwendet."</string>
  <string name="_The_opposite_of__tt_BNE__tt__is__tt_BEQ__tt___Try_writing_a_program_that_uses__tt_BEQ__tt___cC0Rb">"Das Gegenteil von &lt;tt>BNE&lt;/tt> ist &lt;tt>BEQ&lt;/tt>. Versuche ein Programm zu schreiben, das &lt;tt>BEQ&lt;/tt> verwendet."</string>
  <string name="_In_assembly_language__you_ll_usually_use_labels_with_branch_instructions__When_assembled_though__this_label_is_converted_to_a_single_byte_relative_offset__a_number_of_bytes_to_go_backwards_or_forwards_from_the_next_instruction__so_branch_instructions_can_only_go_forward_and_back_around_256_bytes__This_means_they_can_only_be_used_to_move_around_local_code__For_moving_further_you_ll_need_to_use_the_jumping_instructions__Z1bjthl">"In der Assemblersprache verwendet man normalerweise Labels mit Verzweigungsanweisungen. Beim Assemblieren wird dieses Label jedoch in einen einbytigen relativen Offset umgewandelt (eine Anzahl von Bytes, die von der nächsten Anweisung aus vor- oder rückwärts gegangen werden soll), sodass Verzweigungsanweisungen nur etwa 256 Bytes vor und zurück gehen können. Das bedeutet, dass sie nur für Bewegungen innerhalb von lokalem Code verwendet werden können. Für weitere Bewegungen musst du die Sprunganweisungen verwenden."</string>
  <string name="_The_next_line___tt_BNE_decrement__tt___will_shift_execution_to_the_decrement_label_if_the__tt_Z__tt__flag_is_set_to__tt_0__tt___meaning_that_the_two_values_in_the__tt_CPX__tt__comparison_were_not_equal___otherwise_it_does_nothing_and_we_store__tt_X__tt__to__tt__0201__tt___then_finish_the_program__Z1SInwm">"Die nächste Zeile, &lt;tt>BNE decrement&lt;/tt>, wird die Ausführung zum decrement-Label verschieben, wenn das &lt;tt>Z&lt;/tt>-Flag auf &lt;tt>0&lt;/tt> gesetzt ist (was bedeutet, dass die beiden Werte im &lt;tt>CPX&lt;/tt>-Vergleich nicht gleich waren), andernfalls passiert nichts und wir speichern &lt;tt>X&lt;/tt> in &lt;tt>$0201&lt;/tt> und beenden dann das Programm."</string>
  <string name="_First_we_load_the_value__tt__08__tt__into_the__tt_X__tt__register__The_next_line_is_a_label__Labels_just_mark_certain_points_in_a_program_so_we_can_return_to_them_later__After_the_label_we_decrement__tt_X__tt___store_it_to__tt__0200__tt___the_top_left_pixel___and_then_compare_it_to_the_value__tt__03__tt____a_href__http___www_obelisk_me_uk_6502_reference_html_CPX___tt_CPX__tt___a__compares_the_value_in_the__tt_X__tt__register_with_another_value__If_the_two_values_are_equal__the__tt_Z__tt__flag_is_set_to__tt_1__tt___otherwise_it_is_set_to__tt_0__tt___Z2pQ3P1">"Zuerst laden wir den Wert &lt;tt>$08&lt;/tt> in das &lt;tt>X&lt;/tt>-Register. Die nächste Zeile ist ein Label. Labels markieren bestimmte Stellen in einem Programm, damit wir später dorthin zurückkehren können. Nach dem Label dekrementieren wir &lt;tt>X&lt;/tt>, speichern es in &lt;tt>$0200&lt;/tt> (das Pixel oben links) und vergleichen es dann mit dem Wert &lt;tt>$03&lt;/tt>. &lt;a href=\"http://www.obelisk.me.uk/6502/reference.html#CPX\">&lt;tt>CPX&lt;/tt>&lt;/a> vergleicht den Wert im &lt;tt>X&lt;/tt>-Register mit einem anderen Wert. Wenn die beiden Werte gleich sind, wird das &lt;tt>Z&lt;/tt>-Flag auf &lt;tt>1&lt;/tt> gesetzt, andernfalls auf &lt;tt>0&lt;/tt>."</string>
  <string name="_6502_assembly_language_has_a_bunch_of_branching_instructions__all_of_which_branch_based_on_whether_certain_flags_are_set_or_not__In_this_example_we_ll_be_looking_at__tt_BNE__tt____Branch_on_not_equal___Z1Tl2ng">"Die 6502-Assemblersprache hat eine Reihe von Verzweigungsanweisungen, die alle basierend darauf verzweigen, ob bestimmte Flags gesetzt sind oder nicht. In diesem Beispiel schauen wir uns &lt;tt>BNE&lt;/tt> an: \"Branch on not equal\" (Verzweige bei Ungleichheit)."</string>
  <string name="_So_far_we_re_only_able_to_write_basic_programs_without_any_branching_logic__Let_s_change_that__OsuLF">"Bisher können wir nur einfache Programme ohne Verzweigungslogik schreiben. Lass uns das ändern."</string>
  <string name="Branching">"Verzweigungen"</string>
  <string name="_The_opposite_of__tt_ADC__tt__is__tt_SBC__tt___subtract_with_carry___Write_a_program_that_uses_this_instruction__1r5tl3">"Das Gegenteil von &lt;tt>ADC&lt;/tt> ist &lt;tt>SBC&lt;/tt> (subtract with carry). Schreibe ein Programm, das diese Anweisung verwendet."</string>
  <string name="_Rewrite_the_first_example_in_this_section_to_use_the__tt_Y__tt__register_instead_of_the__tt_X__tt__register__Z28lR1Q">"Schreibe das erste Beispiel in diesem Abschnitt so um, dass es das &lt;tt>Y&lt;/tt>-Register anstelle des &lt;tt>X&lt;/tt>-Registers verwendet."</string>
  <string name="_You_ve_seen__tt_TAX__tt___You_can_probably_guess_what__tt_TAY__tt____tt_TXA__tt__and__tt_TYA__tt__do__but_write_some_code_to_test_your_assumptions__ZqpjT1">"Du hast &lt;tt>TAX&lt;/tt> gesehen. Du kannst wahrscheinlich erraten, was &lt;tt>TAY&lt;/tt>, &lt;tt>TXA&lt;/tt> und &lt;tt>TYA&lt;/tt> tun, aber schreibe etwas Code, um deine Vermutungen zu testen."</string>
  <string name="_A_full_list_of_the_6502_instruction_set_is__a_href__http___www_6502_org_tutorials_6502opcodes_html__available_here__a__and__a_href__http___www_obelisk_me_uk_6502_reference_html__here__a___I_usually_refer_to_both_pages_as_they_have_their_strengths_and_weaknesses___These_pages_detail_the_arguments_to_each_instruction__which_registers_they_use__and_which_flags_they_set__They_are_your_bible__Z1EmWkL">"Eine vollständige Liste des 6502-Befehlssatzes ist &lt;a href=\"http://www.6502.org/tutorials/6502opcodes.html\">hier&lt;/a> und &lt;a href=\"http://www.obelisk.me.uk/6502/reference.html\">hier&lt;/a> verfügbar (ich verweise normalerweise auf beide Seiten, da sie ihre Stärken und Schwächen haben). Diese Seiten beschreiben die Argumente für jede Anweisung, welche Register sie verwenden und welche Flags sie setzen. Sie sind deine Bibel."</string>
  <string name="_Assemble_the_code_and_select__b_Step__b__from_the_Run_button_s_dropdown_menu_to_step_through_these_three_instructions__The_monitor_in_the_debugger_shows_a_section_of_memory__and_can_be_helpful_to_visualise_the_execution_of_programs___tt_STA__01__tt__stores_the_value_of_the__tt_A__tt__register_at_memory_location__tt__01__tt___and__tt_ADC__01__tt__adds_the_value_stored_at_the_memory_location__tt__01__tt__to_the__tt_A__tt__register___tt__80____80__tt__should_equal__tt__100__tt___but_because_this_is_bigger_than_a_byte__the__tt_A__tt__register_is_set_to__tt__00__tt__and_the_carry_flag_is_set__As_well_as_this_though__the_zero_flag_is_set__The_zero_flag_is_set_by_all_instructions_where_the_result_is_zero__1WvSg6">"Assembliere den Code und wähle &lt;b>Schritt&lt;/b> aus dem Dropdown-Menü des Run-Buttons, um diese drei Anweisungen schrittweise durchzugehen. Der Monitor im Debugger zeigt einen Speicherbereich an und kann hilfreich sein, um die Ausführung von Programmen zu visualisieren. &lt;tt>STA $01&lt;/tt> speichert den Wert des &lt;tt>A&lt;/tt>-Registers an der Speicheradresse &lt;tt>$01&lt;/tt>, und &lt;tt>ADC $01&lt;/tt> addiert den an der Speicheradresse &lt;tt>$01&lt;/tt> gespeicherten Wert zum &lt;tt>A&lt;/tt>-Register. &lt;tt>$80 + $80&lt;/tt> sollte &lt;tt>$100&lt;/tt> ergeben, aber da dies größer als ein Byte ist, wird das &lt;tt>A&lt;/tt>-Register auf &lt;tt>$00&lt;/tt> gesetzt und das Carry-Flag wird gesetzt. Zusätzlich wird auch das Zero-Flag gesetzt. Das Zero-Flag wird bei allen Anweisungen gesetzt, bei denen das Ergebnis null ist."</string>
  <string name="_An_important_thing_to_notice_here_is_the_distinction_between__tt_ADC___01__tt__and__tt_ADC__01__tt___The_first_one_adds_the_value__tt__01__tt__to_the__tt_A__tt__register__but_the_second_adds_the_value_stored_at_memory_location__tt__01__tt__to_the__tt_A__tt__register__Z2awwXN">"Ein wichtiger Punkt hier ist der Unterschied zwischen &lt;tt>ADC #$01&lt;/tt> und &lt;tt>ADC $01&lt;/tt>. Der erste Befehl addiert den Wert &lt;tt>$01&lt;/tt> zum &lt;tt>A&lt;/tt>-Register, aber der zweite addiert den an der Speicheradresse &lt;tt>$01&lt;/tt> gespeicherten Wert zum &lt;tt>A&lt;/tt>-Register."</string>
  <string name="_In_the_simulator_below__b_type__b___don_t_paste__the_following_code__2ucm1O">"Tippe (nicht einfügen) den folgenden Code in den Simulator ein:"</string>
  <string name="_The_problem_is___tt__184__tt__is_too_big_to_fit_in_a_single_byte__the_max_is__tt__FF__tt____and_the_registers_can_only_hold_a_single_byte__It_s_OK_though__the_processor_isn_t_actually_dumb__If_you_were_looking_carefully_enough__you_ll_have_noticed_that_the_carry_flag_was_set_to__tt_1__tt__after_this_operation__So_that_s_how_you_know__2saSRK">"Das Problem ist, dass &lt;tt>$184&lt;/tt> zu groß ist, um in ein einzelnes Byte zu passen (das Maximum ist &lt;tt>$FF&lt;/tt>), und die Register können nur ein einzelnes Byte speichern. Aber keine Sorge; der Prozessor ist nicht wirklich dumm. Wenn du genau aufgepasst hast, wirst du bemerkt haben, dass das Carry-Flag nach dieser Operation auf &lt;tt>1&lt;/tt> gesetzt wurde. So weißt du Bescheid."</string>
  <string name="_Assemble_the_code__then_turn_on_the_debugger_and_step_through_the_code__watching_the__tt_A__tt__and__tt_X__tt__registers__Something_slightly_odd_happens_on_the_line__tt_ADC___c4__tt___You_might_expect_that_adding__tt__c4__tt__to__tt__c0__tt__would_give__tt__184__tt___but_this_processor_gives_the_result_as__tt__84__tt___What_s_up_with_that__Zcxm19">"Assembliere den Code, schalte dann den Debugger ein und gehe den Code schrittweise durch, während du die Register &lt;tt>A&lt;/tt> und &lt;tt>X&lt;/tt> beobachtest. Etwas Seltsames passiert in der Zeile &lt;tt>ADC #$c4&lt;/tt>. Du könntest erwarten, dass das Addieren von &lt;tt>$c4&lt;/tt> zu &lt;tt>$c0&lt;/tt> &lt;tt>$184&lt;/tt> ergibt, aber dieser Prozessor gibt das Ergebnis als &lt;tt>$84&lt;/tt> aus. Was hat es damit auf sich?"</string>
  <string name="_Instructions_in_assembly_language_are_like_a_small_set_of_predefined_functions__All_instructions_take_zero_or_one_arguments__Here_s_some_annotated_source_code_to_introduce_a_few_different_instructions__kX8bO">"Anweisungen in der Assemblersprache sind wie eine kleine Sammlung vordefinierter Funktionen. Alle Anweisungen nehmen null oder ein Argument. Hier ist etwas kommentierter Quellcode, um einige verschiedene Anweisungen vorzustellen:"</string>
  <string name="Instructions">"Anweisungen"</string>
  <string name="_The_last_section_shows_the_processor_flags__Each_flag_is_one_bit__so_all_seven_flags_live_in_a_single_byte__The_flags_are_set_by_the_processor_to_give_information_about_the_previous_instruction__More_on_that_later___a_href__https___web_archive_org_web_20210626024532_http___www_obelisk_me_uk_6502_registers_html__Read_more_about_the_registers_and_flags_here__a___uAwU">"Der letzte Abschnitt zeigt die Prozessor-Flags. Jedes Flag ist ein Bit, sodass alle sieben Flags in einem einzigen Byte untergebracht sind. Die Flags werden vom Prozessor gesetzt, um Informationen über die vorherige Anweisung zu geben. Mehr dazu später. &lt;a href=\"https://web.archive.org/web/20210626024532/http://www.obelisk.me.uk/6502/registers.html\">Lies hier mehr über Register und Flags&lt;/a>."</string>
  <string name="__tt_PC__tt__is_the_program_counter___it_s_how_the_processor_knows_at_what_point_in_the_program_it_currently_is__It_s_like_the_current_line_number_of_an_executing_script__In_the_JavaScript_simulator_the_code_is_assembled_starting_at_memory_location__tt__0600__tt___so__tt_PC__tt__always_starts_there__oPmxJ">"&lt;tt>PC&lt;/tt> ist der Programmzähler (program counter) - damit weiß der Prozessor, an welcher Stelle im Programm er sich gerade befindet. Es ist wie die aktuelle Zeilennummer eines ausgeführten Skripts. Im JavaScript-Simulator wird der Code ab der Speicheradresse &lt;tt>$0600&lt;/tt> assembliert, daher beginnt &lt;tt>PC&lt;/tt> immer dort."</string>
  <string name="__tt_SP__tt__is_the_stack_pointer__I_won_t_get_into_the_stack_yet__but_basically_this_register_is_decremented_every_time_a_byte_is_pushed_onto_the_stack__and_incremented_when_a_byte_is_popped_off_the_stack__1P8VCj">"&lt;tt>SP&lt;/tt> ist der Stack-Pointer. Ich werde jetzt noch nicht auf den Stack eingehen, aber im Grunde wird dieses Register jedes Mal dekrementiert, wenn ein Byte auf den Stack geschoben wird, und inkrementiert, wenn ein Byte vom Stack genommen wird."</string>
  <string name="_The_first_line_shows_the__tt_A__tt____tt_X__tt__and__tt_Y__tt__registers___tt_A__tt__is_often_called_the__accumulator____Each_register_holds_a_single_byte__Most_operations_work_on_the_contents_of_these_registers__Z1fihXI">"Die erste Zeile zeigt die Register &lt;tt>A&lt;/tt>, &lt;tt>X&lt;/tt> und &lt;tt>Y&lt;/tt> (&lt;tt>A&lt;/tt> wird oft als \"Akkumulator\" bezeichnet). Jedes Register enthält ein einzelnes Byte. Die meisten Operationen arbeiten mit dem Inhalt dieser Register."</string>
  <string name="_We_ve_already_had_a_little_look_at_the_processor_status_section__the_bit_with__tt_A__tt____tt_PC__tt__etc____but_what_does_it_all_mean__ZAb5dg">"Wir haben bereits einen kurzen Blick auf den Prozessorstatus-Bereich geworfen (den Teil mit &lt;tt>A&lt;/tt>, &lt;tt>PC&lt;/tt> usw.), aber was bedeutet das alles?"</string>
  <string name="_Registers_and_flags_Z17U9IF">"Register und Flags"</string>
  <string name="_Add_more_instructions_to_draw_extra_pixels__Z18Dkj2">"Füge weitere Anweisungen hinzu, um zusätzliche Pixel zu zeichnen."</string>
  <string name="_3__qF">"3."</string>
  <string name="_Change_one_of_the_pixels_to_draw_at_the_bottom_right_corner__memory_location__tt__05ff__tt____ZsfGeN">"Ändere eines der Pixel so, dass es in der unteren rechten Ecke gezeichnet wird (Speicheradresse &lt;tt>$05ff&lt;/tt>)."</string>
  <string name="_2__qa">"2."</string>
  <string name="_Try_changing_the_colour_of_the_three_pixels__1lqaSi">"Versuche die Farbe der drei Pixel zu ändern."</string>
  <string name="_1__pE">"1."</string>
  <string name="Exercises">"Übungen"</string>
  <string name="_So__the_instruction__tt_STA__0200__tt__stores_the_value_of_the__tt_A__tt__register_to_memory_location__tt__0200__tt___Click__b_Step__b__four_more_times_to_execute_the_rest_of_the_instructions__keeping_an_eye_on_the__tt_A__tt__register_as_it_changes__Z1LM2U7">"Die Anweisung &lt;tt>STA $0200&lt;/tt> speichert also den Wert des &lt;tt>A&lt;/tt>-Registers an der Speicheradresse &lt;tt>$0200&lt;/tt>. Klicke noch vier Mal auf &lt;b>Schritt&lt;/b>, um die restlichen Anweisungen auszuführen, und beobachte dabei, wie sich das &lt;tt>A&lt;/tt>-Register verändert."</string>
  <string name="_Press__b_Step__b__again_to_execute_the_second_instruction__The_top_left_pixel_of_the_game_console_should_now_be_white__This_simulator_uses_the_memory_locations__tt__0200__tt__to__tt__05ff__tt__to_draw_pixels_on_its_display__The_values__tt__00__tt__to__tt__0f__tt__represent_16_different_colours___tt__00__tt__is_black_and__tt__01__tt__is_white___so_storing_the_value__tt__01__tt__at_memory_location__tt__0200__tt__draws_a_white_pixel_at_the_top_left_corner__This_is_simpler_than_how_an_actual_computer_would_output_video__but_it_ll_do_for_now__2uj5CX">"Drücke erneut &lt;b>Schritt&lt;/b>, um die zweite Anweisung auszuführen. Das Pixel oben links in der Spielkonsole sollte jetzt weiß sein. Dieser Simulator verwendet die Speicheradressen von &lt;tt>$0200&lt;/tt> bis &lt;tt>$05ff&lt;/tt>, um Pixel auf seinem Display zu zeichnen. Die Werte von &lt;tt>$00&lt;/tt> bis &lt;tt>$0f&lt;/tt> repräsentieren 16 verschiedene Farben (&lt;tt>$00&lt;/tt> ist schwarz und &lt;tt>$01&lt;/tt> ist weiß), daher zeichnet das Speichern des Wertes &lt;tt>$01&lt;/tt> an der Speicheradresse &lt;tt>$0200&lt;/tt> ein weißes Pixel in der oberen linken Ecke. Das ist einfacher als die Art und Weise, wie ein echter Computer Video ausgeben würde, aber für den Moment reicht es."</string>
  <string name="_Equipped_with_that_knowledge__you_should_be_able_to_see_that_the_instruction__tt_LDA___01__tt__loads_the_hex_value__tt__01__tt__into_register__tt_A__tt___I_ll_go_into_more_detail_on_registers_in_the_next_section__1WmL1o">"Mit diesem Wissen solltest du erkennen können, dass die Anweisung &lt;tt>LDA #$01&lt;/tt> den Hexadezimalwert &lt;tt>$01&lt;/tt> in das Register &lt;tt>A&lt;/tt> lädt. Ich werde im nächsten Abschnitt näher auf Register eingehen."</string>
  <string name="_Any_numbers_prefixed_with__tt____tt__in_6502_assembly_language__and_by_extension__in_this_book__are_in_hexadecimal__hex__format__If_you_re_not_familiar_with_hex_numbers__I_recommend_you_read__a_href__http___en_wikipedia_org_wiki_Hexadecimal__the_Wikipedia_article__a___Anything_prefixed_with__tt____tt__is_a_literal_number_value__Any_other_number_refers_to_a_memory_location__Zddu1k">"Alle Zahlen mit dem Präfix &lt;tt>$&lt;/tt> in der 6502-Assemblersprache (und folglich auch in diesem Buch) sind im Hexadezimal-(Hex)-Format. Wenn du mit Hexadezimalzahlen nicht vertraut bist, empfehle ich dir, &lt;a href=\"http://en.wikipedia.org/wiki/Hexadecimal\">den Wikipedia-Artikel&lt;/a> zu lesen. Alles mit dem Präfix &lt;tt>#&lt;/tt> ist ein Literalwert. Alle anderen Zahlen beziehen sich auf Speicheradressen."</string>
  <string name="_So__what_s_this_program_actually_doing__Let_s_step_through_it__Hit__b_Reset__b___then_select__b_Step__b__from_the_dropdown_menu__The_button_will_switch_to_step_mode__allowing_you_to_execute_the_program_one_instruction_at_a_time__Click_once_and_you_ll_notice_in_the_debugger_that__tt_A___tt__changed_from__tt__00__tt__to__tt__01__tt___and__tt_PC___tt__changed_from__tt__0600__tt__to__tt__0602__tt___ZdD2Ad">"Was macht dieses Programm eigentlich? Lass uns es Schritt für Schritt durchgehen. Klicke auf &lt;b>Zurücksetzen&lt;/b> und wähle dann &lt;b>Schritt&lt;/b> aus dem Dropdown-Menü. Der Button wechselt in den Schritt-Modus, wodurch du das Programm Anweisung für Anweisung ausführen kannst. Nach einem Klick wirst du im Debugger sehen, dass sich &lt;tt>A=&lt;/tt> von &lt;tt>$00&lt;/tt> zu &lt;tt>$01&lt;/tt> und &lt;tt>PC=&lt;/tt> von &lt;tt>$0600&lt;/tt> zu &lt;tt>$0602&lt;/tt> geändert hat."</string>
  <string name="_The_black_game_console_screen_now_should_show_three_coloured__pixels__at_the_top_left__Z216og8">"Der schwarze Spielkonsolenbildschirm sollte jetzt drei farbige \"Pixel\" oben links zeigen."</string>
  <string name="_So__let_s_dive_in__This_application_contains_a__a_href__https___github_com_skilldrick_6502js__JavaScript_6502_Assembler_and_Simulator__a__that_I_have_adapted_for_this_interactive_tutorial__Click_the__b_Copy__b__button_in_the_code_block_below_to_copy_the_example_code_to_the_editor__Then_click_the_button_in_the_top_right_to_assemble_the_code__then_click_it_again_to_run_the_program__You_can_also_access_these_actions_through_the_dropdown_menu__cRSo9">"Also, lass uns loslegen! Diese Anwendung enthält einen &lt;a href=\"https://github.com/skilldrick/6502js\">JavaScript 6502 Assembler und Simulator&lt;/a>, den ich für dieses interaktive Tutorial angepasst habe. Klicke auf den &lt;b>Kopieren&lt;/b>-Button im Code-Block unten, um den Beispielcode in den Editor zu kopieren. Klicke dann auf den Button oben rechts, um den Code zu assemblieren, und klicke erneut, um das Programm auszuführen. Diese Aktionen kannst du auch über das Dropdown-Menü aufrufen."</string>
  <string name="_Our_first_program_Z2eKrwv">"Unser erstes Programm"</string>
  <string name="_Then_why_6502__Why_not_a__i_useful__i__assembly_language__like__a_href__http___en_wikipedia_org_wiki_X86__x86__a___Well__I_don_t_think_learning_x86_is_useful__I_don_t_think_you_ll_ever_have_to__i_write__i__assembly_language_in_your_day_job___this_is_purely_an_academic_exercise__something_to_expand_your_mind_and_your_thinking__6502_was_originally_written_in_a_different_age__a_time_when_the_majority_of_developers_were_writing_assembly_directly__rather_than_in_these_new_fangled_high_level_programming_languages__So__it_was_designed_to_be_written_by_humans__More_modern_assembly_languages_are_meant_to_written_by_compilers__so_let_s_leave_it_to_them__Plus__6502_is__i_fun__i___Nobody_ever_called_x86__i_fun__i___Z18zqW8">"Warum dann 6502? Warum nicht eine &lt;i>nützliche&lt;/i> Assemblersprache wie &lt;a href=\"http://en.wikipedia.org/wiki/X86\">x86&lt;/a>? Nun, ich denke nicht, dass das Lernen von x86 nützlich ist. Ich glaube nicht, dass du jemals in deinem Arbeitsalltag Assemblersprache &lt;i>schreiben&lt;/i> musst - dies ist eine rein akademische Übung, etwas um deinen Geist und dein Denken zu erweitern. 6502 wurde ursprünglich in einer anderen Zeit geschrieben, als die Mehrheit der Entwickler direkt in Assembler programmierte, statt in diesen neumodischen höheren Programmiersprachen. Daher wurde es für Menschen geschrieben. Modernere Assemblersprachen sind dafür gedacht, von Compilern geschrieben zu werden, also überlassen wir es ihnen. Außerdem macht 6502 &lt;i>Spaß&lt;/i>. Niemand hat je x86 als &lt;i>spaßig&lt;/i> bezeichnet."</string>
  <string name="_Seriously_though__I_think_it_s_valuable_to_have_an_understanding_of_assembly_language__Assembly_language_is_the_lowest_level_of_abstraction_in_computers___the_point_at_which_the_code_is_still_readable__Assembly_language_translates_directly_to_the_bytes_that_are_executed_by_your_computer_s_processor__If_you_understand_how_it_works__you_ve_basically_become_a_computer__a_href__http___skilldrick_co_uk_2011_04_magic_in_software_development___magician__a___Z2haKwe">"Aber ernsthaft, ich denke es ist wertvoll, ein Verständnis für Assemblersprache zu haben. Assemblersprache ist die niedrigste Abstraktionsebene in Computern - der Punkt, an dem der Code noch lesbar ist. Assemblersprache wird direkt in die Bytes übersetzt, die von deinem Computerprozessor ausgeführt werden. Wenn du verstehst, wie es funktioniert, bist du im Grunde ein Computer-&lt;a href=\"http://skilldrick.co.uk/2011/04/magic-in-software-development/\">Magier&lt;/a> geworden."</string>
  <string name="__Actually__I_ve_been_reliably_informed_that_6502_processors_are_still_being_produced_by__a_href__http___www_westerndesigncenter_com_wdc_w65c02s_chip_cfm__Western_Design_Center__a__and__a_href__http___www_mouser_co_uk_Search_Refine_aspx_Keyword_65C02__sold_to_hobbyists__a___so_clearly_6502__i_isn_apos_t__i__a_dead_language__Who_knew___Z1J0HYN">"(Tatsächlich wurde mir zuverlässig mitgeteilt, dass 6502-Prozessoren immer noch von &lt;a href=\"http://www.westerndesigncenter.com/wdc/w65c02s-chip.cfm\">Western Design Center&lt;/a> hergestellt und &lt;a href=\"http://www.mouser.co.uk/Search/Refine.aspx?Keyword=65C02\">an Bastler verkauft&lt;/a> werden, also ist 6502 offensichtlich &lt;i>keine&lt;/i> tote Sprache! Wer hätte das gedacht?)"</string>
  <string name="_So__why_would_you_want_to_learn_6502__It_s_a_dead_language_isn_t_it__Well__so_s_Latin__And_they_still_teach_that___a_href__http___en_wikipedia_org_wiki_Q_E_D___Q_E_D___a__2mPHnx">"Warum solltest du also 6502 lernen wollen? Es ist doch eine tote Sprache, oder? Nun, Latein ist das auch. Und das wird immer noch unterrichtet. &lt;a href=\"http://en.wikipedia.org/wiki/Q.E.D.\">Q.E.D.&lt;/a>"</string>
  <string name="_In_this_tiny_tutorial_I_m_going_to_show_you_how_to_get_started_writing_6502_assembly_language__The_6502_processor_was_massive_in_the_seventies_and_eighties__powering_famous_computers_like_the__a_href__http___en_wikipedia_org_wiki_BBC_Micro__BBC_Micro__a____a_href__http___en_wikipedia_org_wiki_Atari_2600__Atari_2600__a____a_href__http___en_wikipedia_org_wiki_Commodore_64__Commodore_64__a____a_href__http___en_wikipedia_org_wiki_Apple_II__Apple_II__a___and_the__a_href__http___en_wikipedia_org_wiki_Nintendo_Entertainment_System__Nintendo_Entertainment_System__a___Bender_in_Futurama__a_href__http___www_transbyte_org_SID_SID_files_Bender_6502_jpg__has_a_6502_processor_for_a_brain__a____a_href__http___www_pagetable_com_docs_terminator_00_37_23_jpg__Even_the_Terminator_was_programmed_in_6502__a___Z1G0SFd">"In diesem kleinen Tutorial zeige ich dir, wie du mit der 6502-Assemblersprache loslegen kannst. Der 6502-Prozessor war in den Siebzigern und Achtzigern riesig und trieb berühmte Computer wie den &lt;a href=\"http://en.wikipedia.org/wiki/BBC_Micro\">BBC Micro&lt;/a>, &lt;a href=\"http://en.wikipedia.org/wiki/Atari_2600\">Atari 2600&lt;/a>, &lt;a href=\"http://en.wikipedia.org/wiki/Commodore_64\">Commodore 64&lt;/a>, &lt;a href=\"http://en.wikipedia.org/wiki/Apple_II\">Apple II&lt;/a> und das &lt;a href=\"http://en.wikipedia.org/wiki/Nintendo_Entertainment_System\">Nintendo Entertainment System&lt;/a> an. Bender aus Futurama &lt;a href=\"http://www.transbyte.org/SID/SID-files/Bender_6502.jpg\">hat einen 6502-Prozessor als Gehirn&lt;/a>. &lt;a href=\"http://www.pagetable.com/docs/terminator/00-37-23.jpg\">Sogar der Terminator wurde in 6502 programmiert&lt;/a>."</string>
  <string name="Introduction">"Einführung"</string>
  <string name="_Tutorial__sub_by__a_href__https___www_skilldrick_co_uk___Nick_Morgan__a___licensed_under_CC_BY_4_0__sub__1M7PIE">"Tutorial &lt;sub>von &lt;a href=\"https://www.skilldrick.co.uk/\">Nick Morgan&lt;/a>, lizenziert unter CC BY 4.0&lt;/sub>"</string>
  <string name="__b__tt__10__tt___tt__15__tt___b___Snake_position_data__head__body_segments__tail__ZKBUH3">"&lt;b>&lt;tt>$10&lt;/tt>-&lt;tt>$15&lt;/tt>&lt;/b>: Schlangen-Positionsdaten (Kopf, Körpersegmente, Schwanz)"</string>
  <string name="__b__tt__03__tt___b___Snake_length_Z1torzH">"&lt;b>&lt;tt>$03&lt;/tt>&lt;/b>: Schlangen-Länge"</string>
  <string name="__b__tt__02__tt___b___Snake_direction__1_up__2_right__4_down__8_left__Z2f9IF2">"&lt;b>&lt;tt>$02&lt;/tt>&lt;/b>: Schlangen-Richtung (1=oben, 2=rechts, 4=unten, 8=links)"</string>
  <string name="__b__tt__00__tt___tt__01__tt___b___Apple_position_Z1aqMwv">"&lt;b>&lt;tt>$00&lt;/tt>-&lt;tt>$01&lt;/tt>&lt;/b>: Apfel-Position"</string>
  <string name="_Snake_Game_Memory_Usage_btnrC">"Speichernutzung im Snake-Spiel"</string>
  <string name="__b_E__b__or_Space_key___tt__20__tt___1Tjb5z">"&lt;b>E&lt;/b> oder Leertaste (&lt;tt>$20&lt;/tt>)"</string>
  <string name="__b_Q__b__or_Enter_Return_key___tt__0D__tt___2aspO6">"&lt;b>Q&lt;/b> oder Eingabe/Return-Taste (&lt;tt>$0D&lt;/tt>)"</string>
  <string name="__b_Action_buttons__b___1FOCe">"&lt;b>Aktionstasten&lt;/b>:"</string>
  <string name="__b_D__b__or_Right_Arrow_key___tt__64__tt___ZAFEqH">"&lt;b>D&lt;/b> oder Pfeil nach rechts (&lt;tt>$64&lt;/tt>)"</string>
  <string name="__b_S__b__or_Down_Arrow_key___tt__73__tt___19CCNY">"&lt;b>S&lt;/b> oder Pfeil nach unten (&lt;tt>$73&lt;/tt>)"</string>
  <string name="__b_A__b__or_Left_Arrow_key___tt__61__tt___Z1A7tEM">"&lt;b>A&lt;/b> oder Pfeil nach links (&lt;tt>$61&lt;/tt>)"</string>
  <string name="__b_W__b__or_Up_Arrow_key___tt__77__tt___Z1i2Viy">"&lt;b>W&lt;/b> oder Pfeil nach oben (&lt;tt>$77&lt;/tt>)"</string>
  <string name="__b_Directional_controls__b___Z2t9lpj">"&lt;b>Richtungssteuerung&lt;/b>:"</string>
  <string name="__b__tt__FF__tt___b___Last_pressed_key__ASCII_code__Z19lH3v">"&lt;b>&lt;tt>$FF&lt;/tt>&lt;/b>: Zuletzt gedrückte Taste (ASCII-Code)"</string>
  <string name="__b__tt__FE__tt___b___Random_number_generator__reads_as_a_random_value_0_255__Z2fyOd2">"&lt;b>&lt;tt>$FE&lt;/tt>&lt;/b>: Zufallszahlengenerator (liefert einen Zufallswert 0-255)"</string>
  <string name="_Special_Memory_Locations__in_Simulator__IKjvi">"Spezielle Speicheradressen (im Simulator)"</string>
  <string name="__b_PHA_PLA__b___Push_pull_accumulator_to_from_stack_Z19ofja">"&lt;b>PHA/PLA&lt;/b>: Akkumulator auf Stack legen/vom Stack holen"</string>
  <string name="__b_BEQ_BNE_BCC_BCS__b___Branch_if_equal_not_equal_carry_clear_carry_set_Z1oVQ92">"&lt;b>BEQ/BNE/BCC/BCS&lt;/b>: Verzweige wenn gleich/ungleich/Übertrag gelöscht/Übertrag gesetzt"</string>
  <string name="__b_JSR_RTS__b___Jump_to_subroutine___Return_from_subroutine_ZNbjqf">"&lt;b>JSR/RTS&lt;/b>: Sprung zu Unterprogramm / Rückkehr aus Unterprogramm"</string>
  <string name="__b_JMP__b___Unconditional_jump_1tOzM">"&lt;b>JMP&lt;/b>: Unbedingter Sprung"</string>
  <string name="__b_ADC_SBC__b___Add_subtract_with_carry_Z1bM2Xa">"&lt;b>ADC/SBC&lt;/b>: Addieren/Subtrahieren mit Übertrag"</string>
  <string name="__b_INX_INY_DEX_DEY__b___Increment_decrement_registers_1eWjGj">"&lt;b>INX/INY/DEX/DEY&lt;/b>: Register erhöhen/verringern"</string>
  <string name="__b_STA_STX_STY__b___Store_registers_to_memory_9EGoS">"&lt;b>STA/STX/STY&lt;/b>: Register im Speicher ablegen"</string>
  <string name="__b_LDA_LDX_LDY__b___Load_registers_YTVAr">"&lt;b>LDA/LDX/LDY&lt;/b>: Register laden"</string>
  <string name="_Common_Instructions_2tuEXC">"Häufige Anweisungen"</string>
  <string name="__b_Indirect_Indexed__b____tt___c0__Y__tt____Dereference_zero_page_address__then_add_Y_Z1c9vkg">"&lt;b>Indirekt Indiziert&lt;/b> (&lt;tt>($c0),Y&lt;/tt>): Dereferenziert Nullseitenadresse, dann Y addieren"</string>
  <string name="__b_Indexed_Indirect__b____tt___c0_X___tt____Add_X_to_zero_page_address__then_dereference_1zVI1s">"&lt;b>Indiziert Indirekt&lt;/b> (&lt;tt>($c0,X)&lt;/tt>): Addiert X zur Nullseitenadresse, dann dereferenzieren"</string>
  <string name="__b_Indirect__b____tt___c000___tt____Look_up_address_stored_at_given_location_1uy5cv">"&lt;b>Indirekt&lt;/b> (&lt;tt>($c000)&lt;/tt>): Liest die an der angegebenen Adresse gespeicherte Adresse"</string>
  <string name="__b_Absolute_X_Y__b____tt__c000_X__tt____Add_X_Y_register_to_absolute_address_ZdTHbX">"&lt;b>Absolut,X/Y&lt;/b> (&lt;tt>$c000,X&lt;/tt>): Addiert X/Y-Register zur absoluten Adresse"</string>
  <string name="__b_Zero_Page_X_Y__b____tt__c0_X__tt____Add_X_Y_register_to_zero_page_address_Z2526wu">"&lt;b>Nullseite,X/Y&lt;/b> (&lt;tt>$c0,X&lt;/tt>): Addiert X/Y-Register zur Nullseitenadresse"</string>
  <string name="__b_Absolute__b____tt__c000__tt____Access_any_memory_location_1iqAxf">"&lt;b>Absolut&lt;/b> (&lt;tt>$c000&lt;/tt>): Greift auf beliebige Speicheradressen zu"</string>
  <string name="__b_Zero_Page__b____tt__c0__tt____Access_memory_locations__tt__00__tt___tt__FF__tt__ZvCgCW">"&lt;b>Nullseite&lt;/b> (&lt;tt>$c0&lt;/tt>): Greift auf Speicheradressen &lt;tt>$00&lt;/tt>-&lt;tt>$FF&lt;/tt> zu"</string>
  <string name="__b_Immediate__b____tt___c0__tt____Use_the_actual_value_ZzszL8">"&lt;b>Unmittelbar&lt;/b> (&lt;tt>#$c0&lt;/tt>): Verwendet den tatsächlichen Wert"</string>
  <string name="_Addressing_Modes_2dKMt8">"Adressierungsmodi"</string>
  <string name="_Used_for_conditional_branching_1Cnzel">"Wird für bedingte Verzweigungen verwendet"</string>
  <string name="__b_C__b___Carry___Set_when_arithmetic_operations_overflow_a_byte_Z1nuJcM">"&lt;b>C&lt;/b> (Übertrag): Gesetzt, wenn arithmetische Operationen ein Byte überlaufen"</string>
  <string name="__b_Z__b___Zero___Set_when_result_is_zero_Z1SohVy">"&lt;b>Z&lt;/b> (Null): Gesetzt, wenn Ergebnis null ist"</string>
  <string name="__b_I__b___Interrupt___Set_when_interrupts_are_disabled_1SwrHL">"&lt;b>I&lt;/b> (Interrupt): Gesetzt, wenn Interrupts deaktiviert sind"</string>
  <string name="__b_D__b___Decimal___Set_when_processor_is_in_BCD__Binary_Coded_Decimal__mode_18r6mA">"&lt;b>D&lt;/b> (Dezimal): Gesetzt, wenn Prozessor im BCD-Modus (Binary Coded Decimal) ist"</string>
  <string name="__b_B__b___Break___Set_when_BRK_instruction_is_executed_Z18S7Ib">"&lt;b>B&lt;/b> (Break): Gesetzt, wenn BRK-Anweisung ausgeführt wird"</string>
  <string name="__b_V__b___Overflow___Set_when_arithmetic_operation_causes_signed_overflow_ZxFxdh">"&lt;b>V&lt;/b> (Überlauf): Gesetzt, wenn arithmetische Operation einen Vorzeichenüberlauf verursacht"</string>
  <string name="__b_N__b___Negative___Set_when_bit_7_of_result_is_set_Z2pFiTm">"&lt;b>N&lt;/b> (Negativ): Gesetzt, wenn Bit 7 des Ergebnisses gesetzt ist"</string>
  <string name="_Processor_Flags_Za9lQL">"Prozessor-Flags"</string>
  <string name="__b_PC__b___Program_Counter___Points_to_the_next_instruction_to_execute_170bWK">"&lt;b>PC&lt;/b> (Program Counter): Zeigt auf die nächste auszuführende Anweisung"</string>
  <string name="__b_SP__b___Stack_Pointer___Points_to_current_stack_position__starts_at__tt__FF__tt___Z2uza6t">"&lt;b>SP&lt;/b> (Stack Pointer): Zeigt auf aktuelle Stack-Position (beginnt bei &lt;tt>$FF&lt;/tt>)"</string>
  <string name="__b_X__Y__b___Index_registers_for_addressing_and_counting_ZHNjBl">"&lt;b>X, Y&lt;/b>: Indexregister für Adressierung und Zählung"</string>
  <string name="__b_A__b___Accumulator___Main_register_for_calculations_and_data_manipulation_Psyuz">"&lt;b>A&lt;/b> (Akkumulator): Hauptregister für Berechnungen und Datenmanipulation"</string>
  <string name="Registers">"Register"</string>
  <string name="__b__tt__f__tt___b___Light_grey___tt__bbbbbb__tt___1SYow3">"&lt;b>&lt;tt>$f&lt;/tt>&lt;/b>: Hellgrau (&lt;tt>#bbbbbb&lt;/tt>)"</string>
  <string name="__b__tt__e__tt___b___Light_blue___tt__0088ff__tt___1TMos6">"&lt;b>&lt;tt>$e&lt;/tt>&lt;/b>: Hellblau (&lt;tt>#0088ff&lt;/tt>)"</string>
  <string name="__b__tt__d__tt___b___Light_green___tt__aaff66__tt___1ooFTX">"&lt;b>&lt;tt>$d&lt;/tt>&lt;/b>: Hellgrün (&lt;tt>#aaff66&lt;/tt>)"</string>
  <string name="__b__tt__c__tt___b___Grey___tt__777777__tt___VeNBo">"&lt;b>&lt;tt>$c&lt;/tt>&lt;/b>: Grau (&lt;tt>#777777&lt;/tt>)"</string>
  <string name="__b__tt__b__tt___b___Dark_grey___tt__333333__tt___1sg3BN">"&lt;b>&lt;tt>$b&lt;/tt>&lt;/b>: Dunkelgrau (&lt;tt>#333333&lt;/tt>)"</string>
  <string name="__b__tt__a__tt___b___Light_red___tt__ff7777__tt___Z2pfu96">"&lt;b>&lt;tt>$a&lt;/tt>&lt;/b>: Hellrot (&lt;tt>#ff7777&lt;/tt>)"</string>
  <string name="__b__tt__9__tt___b___Brown___tt__664400__tt___Z1ssQBQ">"&lt;b>&lt;tt>$9&lt;/tt>&lt;/b>: Braun (&lt;tt>#664400&lt;/tt>)"</string>
  <string name="__b__tt__8__tt___b___Orange___tt__dd8855__tt___dPCVM">"&lt;b>&lt;tt>$8&lt;/tt>&lt;/b>: Orange (&lt;tt>#dd8855&lt;/tt>)"</string>
  <string name="__b__tt__7__tt___b___Yellow___tt__eeee77__tt___Z2wxzK">"&lt;b>&lt;tt>$7&lt;/tt>&lt;/b>: Gelb (&lt;tt>#eeee77&lt;/tt>)"</string>
  <string name="__b__tt__6__tt___b___Blue___tt__0000aa__tt___ZuFAqS">"&lt;b>&lt;tt>$6&lt;/tt>&lt;/b>: Blau (&lt;tt>#0000aa&lt;/tt>)"</string>
  <string name="__b__tt__5__tt___b___Green___tt__00cc55__tt___Hbtpt">"&lt;b>&lt;tt>$5&lt;/tt>&lt;/b>: Grün (&lt;tt>#00cc55&lt;/tt>)"</string>
  <string name="__b__tt__4__tt___b___Purple___tt__cc44cc__tt___ZInSvj">"&lt;b>&lt;tt>$4&lt;/tt>&lt;/b>: Lila (&lt;tt>#cc44cc&lt;/tt>)"</string>
  <string name="__b__tt__3__tt___b___Cyan___tt__aaffee__tt___11C6oj">"&lt;b>&lt;tt>$3&lt;/tt>&lt;/b>: Cyan (&lt;tt>#aaffee&lt;/tt>)"</string>
  <string name="__b__tt__2__tt___b___Red___tt__880000__tt___2gvnWo">"&lt;b>&lt;tt>$2&lt;/tt>&lt;/b>: Rot (&lt;tt>#880000&lt;/tt>)"</string>
  <string name="__b__tt__1__tt___b___White___tt__ffffff__tt___Z2tN0n2">"&lt;b>&lt;tt>$1&lt;/tt>&lt;/b>: Weiß (&lt;tt>#ffffff&lt;/tt>)"</string>
  <string name="__b__tt__0__tt___b___Black___tt__000000__tt___8k89p">"&lt;b>&lt;tt>$0&lt;/tt>&lt;/b>: Schwarz (&lt;tt>#000000&lt;/tt>)"</string>
  <string name="_Color_Palette_Z1u2nGs">"Farbpalette"</string>
  <string name="_First_row___tt__0200__tt___tt__021F__tt___second_row___tt__0220__tt___tt__023F__tt___etc__Z23xpbU">"Erste Zeile: &lt;tt>$0200&lt;/tt>-&lt;tt>$021F&lt;/tt>, zweite Zeile: &lt;tt>$0220&lt;/tt>-&lt;tt>$023F&lt;/tt>, usw."</string>
  <string name="_Organized_as_four_horizontal_strips_of_32_8_pixels_ZCQeNP">"Organisiert als vier horizontale Streifen von 32×8 Pixeln"</string>
  <string name="_Values__tt__00__tt___tt__0F__tt__represent_16_different_colors___tt__00__tt__black___tt__01__tt__white__Z1HerEs">"Werte &lt;tt>$00&lt;/tt>-&lt;tt>$0F&lt;/tt> stellen 16 verschiedene Farben dar (&lt;tt>$00&lt;/tt>=schwarz, &lt;tt>$01&lt;/tt>=weiß)"</string>
  <string name="_Screen_maps_to_memory_range__tt__0200__tt___tt__05FF__tt__3X6BT">"Bildschirm wird auf Speicherbereich &lt;tt>$0200&lt;/tt>-&lt;tt>$05FF&lt;/tt> abgebildet"</string>
  <string name="_Display_Organization_Z2bG9K1">"Bildschirmorganisation"</string>
  <string name="__b_Program_Storage__b___Starting_at__tt__0600__tt__1rbAYd">"&lt;b>Programmspeicher&lt;/b>: Beginnt bei &lt;tt>$0600&lt;/tt>"</string>
  <string name="__b_Display_Memory__b____tt__0200__tt___tt__05FF__tt___used_for_screen_output__Z7vtRw">"&lt;b>Anzeigespeicher&lt;/b>: &lt;tt>$0200&lt;/tt>-&lt;tt>$05FF&lt;/tt> (für Bildschirmausgabe)"</string>
  <string name="__b_Stack__b____tt__0100__tt___tt__01FF__tt__Z11pNI8">"&lt;b>Stack&lt;/b>: &lt;tt>$0100&lt;/tt>-&lt;tt>$01FF&lt;/tt>"</string>
  <string name="__b_Zero_Page__b____tt__0000__tt___tt__00FF__tt___first_256_bytes__faster_access__l3Tqa">"&lt;b>Zero Page&lt;/b>: &lt;tt>$0000&lt;/tt>-&lt;tt>$00FF&lt;/tt> (erste 256 Bytes, schnellerer Zugriff)"</string>
  <string name="_Memory_Map_ZmWVek">"Speicherbelegung"</string>
  <string name="Emulator">"Emulator"</string>
  <string name="Learning">"Lernen"</string>
  <string name="Programming">"Programmierung"</string>
  <string name="Assembly">"Assembler"</string>
  <string name="_First_release_of_Learn_6502_Assembly_for_GNOME_Z1sYxAY">"Erste Veröffentlichung von Lerne 6502 Assembler für GNOME"</string>
  <string name="_Fixed_build_error_on_PostmarketOS__improving_mobile_compatibility_Z1PLMTu">"Build-Fehler unter PostmarketOS behoben, verbessert Kompatibilität mit Mobilgeräten"</string>
  <string name="_Debugger_now_only_updates_when_visible__reducing_unnecessary_processing_14yMO">"Debugger wird nur noch aktualisiert, wenn er sichtbar ist, reduziert unnötige Verarbeitung"</string>
  <string name="_Reduced_default_hex_monitor_address_range_for_better_efficiency_2kmHiu">"Reduzierter Standard-Adressbereich des Hex-Monitors für bessere Effizienz"</string>
  <string name="_Enhanced_the_hex_monitor_address_range_input_for_easier_value_editing_21aSsV">"Verbesserte Eingabe des Adressbereichs im Hex-Monitor"</string>
  <string name="_Improved_the_game_console_performance_for_smoother_gameplay_Z17FJRF">"Verbesserte Leistung der Spielekonsole für flüssigeres Gameplay"</string>
  <string name="_Optimized_Flatpak_configuration_by_removing_unnecessary_permissions_2oTAd0">"Optimierte Flatpak-Konfiguration durch Entfernen unnötiger Berechtigungen"</string>
  <string name="_Improved_descriptions_to_be_more_welcoming_for_non_technical_users_sCxwc">"Verbesserte Beschreibungen für nicht-technische Benutzer"</string>
  <string name="_Enhanced_app_presentation_and_accessibility_uAd9s">"Verbesserte App-Darstellung und Zugänglichkeit"</string>
  <string name="_Added_file_management_to_save_and_load_your_programs_Z2tqqjA">"Dateiverwaltung zum Speichern und Laden von Programmen hinzugefügt"</string>
  <string name="_Games_now_automatically_pause_when_switching_between_screens_Z1Dn30D">"Spiele werden jetzt automatisch pausiert, wenn zwischen Bildschirmen gewechselt wird"</string>
  <string name="_Many_minor_bugs_have_been_fixed_to_improve_overall_usability_1iDRoi">"Zahlreiche kleine Fehler wurden behoben, um die allgemeine Benutzerfreundlichkeit zu verbessern"</string>
  <string name="_New_tools_to_examine_your_code__including_disassembler_and_fast_switchable_memory_viewer_1rm4cg">"Neue Werkzeuge zur Code-Analyse, einschließlich Disassembler und schnell umschaltbarer Speicheransicht"</string>
  <string name="_Improved_game_screen_and_controls_for_mobile_devices_CiiU3">"Verbesserte Spieloberfläche und Steuerung für mobile Geräte"</string>
  <string name="_Added_help_feature_to_make_code_editing_easier_for_beginners_Z2nKQ0T">"Hilfefunktion hinzugefügt, um die Codebearbeitung für Anfänger zu erleichtern"</string>
  <string name="_Major_update_focusing_on_improved_learning_experience_and_usability_18xQei">"Umfangreiches Update mit Fokus auf verbessertes Lernerlebnis und Benutzerfreundlichkeit"</string>
  <string name="_Virtual_game_console_displaying_three_colored_pixels_boXc9">"Virtuelle Spielkonsole mit drei farbigen Pixeln"</string>
  <string name="_Built_in_debugger_showing_real_time_registers__flags__and_memory_1V8VTp">"Integrierter Debugger mit Echtzeit-Anzeige von Registern, Flags und Speicher"</string>
  <string name="_Code_editor_with_6502_assembly_syntax_highlighting_and_visible_help_ZGIEO6">"Code-Editor mit Syntaxhervorhebung für 6502-Assembler und sichtbarer Hilfe"</string>
  <string name="_Interactive_tutorial_interface_in_dark_theme_19fPUX">"Interaktive Tutorial-Oberfläche im dunklen Design"</string>
  <string name="_Interactive_tutorial_interface_in_light_theme_Z2qKrS6">"Interaktive Tutorial-Oberfläche im hellen Design"</string>
  <string name="_See_your_code_run_on_a_virtual_game_console_Z29qd8U">"Führe deinen Code auf einer virtuellen Spielkonsole aus"</string>
  <string name="_Debug_your_programs_with_real_time_tools_qosm2">"Debugge deine Programme mit Echtzeit-Tools"</string>
  <string name="_Write_code_with_a_built_in_editor_22JfOA">"Schreibe Code mit einem integrierten Editor"</string>
  <string name="_Learn_step_by_step_with_an_interactive_tutorial_Z29gL9p">"Lerne Schritt für Schritt mit einem interaktiven Tutorial"</string>
  <string name="_Features__1Rmckd">"Funktionen:"</string>
  <string name="_A_comprehensive_learning_environment_for_programming_vintage_computers_and_game_consoles_using_6502_assembly_language__Z1yBBkb">"Eine umfassende Lernumgebung für die Programmierung von Retro-Computern und Spielkonsolen mit 6502-Assembler."</string>
  <string name="_6502_Assembly_Learning_Environment_2fCV79">"Lernumgebung für 6502-Assembler"</string>
  <string name="_Copy_to_clipboard_2PTO2">"In die Zwischenablage kopieren"</string>
  <string name="_Full_Memory___0000__FFFF__2sOwGS">"Gesamter Speicher ($0000-$FFFF)"</string>
  <string name="_Random_Input___FE__FF__Z8qAK7">"Zufalls-/Eingabedaten ($FE-$FF)"</string>
  <string name="_Snake_Game_Data___00__15__1F8F70">"Snake-Spieldaten ($00-$15)"</string>
  <string name="_Program_Storage___0600__FFFF__ZyAWtE">"Programmspeicher ($0600-$FFFF)"</string>
  <string name="_Display_Memory___0200__05FF__PLOnz">"Anzeigespeicher ($0200-$05FF)"</string>
  <string name="_Stack___0100__01FF__WUnbs">"Stack ($0100-$01FF)"</string>
  <string name="_Zero_Page___0000__00FF__1dvTE1">"Nullseite ($0000-$00FF)"</string>
  <string name="_Copy_to_editor_1INugX">"In Editor kopieren"</string>
  <string name="_There_are_currently_no_settings__2jAkl8">"Derzeit gibt es keine Einstellungen."</string>
  <string name="_Main_Settings_Z2a4Oqa">"Haupteinstellungen"</string>
  <string name="Appearance">"Erscheinungsbild"</string>
  <string name="Preferences">"Einstellungen"</string>
  <string name="_Learn_how_to_program_the_6502_microprocessor__OXijz">"Lerne, wie man den 6502-Mikroprozessor programmiert."</string>
  <string name="Disassembled">"Disassemblierter Code"</string>
  <string name="Hexdump">"Hexdump"</string>
  <string name="_Hex_Monitor_26WWP2">"Hex-Monitor"</string>
  <string name="Messages">"Meldungen"</string>
  <string name="Information">"Information"</string>
  <string name="_Debug_your_6502_assembly_code__step_through_your_program__and_view_memory_and_registers__To_get_started__assemble_and_run_your_program__ZBeIRp">"Debugge deinen 6502-Assemblercode, gehe dein Programm schrittweise durch und betrachte Speicher und Register. Kompiliere und starte dein Programm, um zu beginnen."</string>
  <string name="Discard">"Verwerfen"</string>
  <string name="Cancel">"Abbrechen"</string>
  <string name="_Your_file_has_unsaved_changes__Changes_will_be_lost_if_you_don_t_save_them__1jrVtU">"Deine Datei enthält ungespeicherte Änderungen. Die Änderungen gehen verloren, wenn du sie nicht speicherst."</string>
  <string name="_Save_changes__BGToh">"Änderungen speichern?"</string>
  <string name="Continue">"Fortfahren"</string>
  <string name="Quit">"Beenden"</string>
  <string name="_About_Learn_6502_Assembly_ZX2nrT">"Über Lerne 6502 Assembler"</string>
  <string name="Help">"Hilfe"</string>
  <string name="_Save_as____1Rwize">"Speichern unter..."</string>
  <string name="Save">"Speichern"</string>
  <string name="_Open____sYsTB">"Öffnen..."</string>
  <string name="_Game_Console_Z1Kv08p">"Spielkonsole"</string>
  <string name="Debugger">"Debugger"</string>
  <string name="Editor">"Editor"</string>
  <string name="Learn">"Lernen"</string>
  <string name="Menu">"Menü"</string>
  <string name="_Learn_6502_Assembly_2lhBH9">"Lerne 6502 Assembler"</string>
  <string name="_All_Files_51THg">"Alle Dateien"</string>
  <string name="_Assembly_Files_Z2qRh98">"Assembler-Dateien"</string>
  <string name="_File_saved_successfully_hlGuq">"Datei erfolgreich gespeichert"</string>
  <string name="_Error_saving_file_Fw4xg">"Fehler beim Speichern der Datei"</string>
  <string name="_Save_Assembly_File_1jVN85">"Assembler Datei speichern"</string>
  <string name="untitled">"unbenannt"</string>
  <string name="_Error_opening_file_1x63uv">"Fehler beim Öffnen der Datei"</string>
  <string name="_File_loaded_successfully_a6wL3">"Datei erfolgreich geladen"</string>
  <string name="_Failed_to_load_file_1LPqBK">"Datei konnte nicht geladen werden"</string>
  <string name="_Open_Assembly_File_tGi5K">"Assembler-Datei öffnen"</string>
  <string name="_Gamepad_key_pressed__D2sgb">"Gamepad-Taste gedrückt:"</string>
  <string name="_Labels_failure_Z2tERrs">"Label-Fehler"</string>
  <string name="_Simulator_failure_ZMVICH">"Simulator-Fehler"</string>
  <string name="_Disassembly__MtSVa">"Disassemblierung:"</string>
  <string name="_Hexdump__ZshyTT">"Hexdump:"</string>
  <string name="_Assemble_failed_16Fqw1">"Assemblierung fehlgeschlagen"</string>
  <string name="_Assembled_successfully_sjhhk">"Erfolgreich assembliert"</string>
  <string name="_Program_paused_automatically_pg83R">"Programm automatisch pausiert"</string>
  <string name="_Failed_to_copy_to_clipboard_udcGJ">"Konnte nicht in die Zwischenablage kopiert werden"</string>
  <string name="_Copied_to_clipboard_Z2bgfrU">"In die Zwischenablage kopiert"</string>
  <string name="_Code_copied_to_editor_ZXrg1o">"Code in Editor kopiert"</string>
  <string name="Step">"Schritt"</string>
  <string name="Reset">"Zurücksetzen"</string>
  <string name="Resume">"Fortsetzen"</string>
  <string name="Pause">"Pause"</string>
  <string name="Run">"Ausführen"</string>
  <string name="Assemble">"Assemblieren"</string>
  <string name="_File___s__has_unsaved_changes_2qBBIH">"Datei \"%1$s\" enthält ungespeicherte Änderungen"</string>
  <string name="_Unsaved_changes_9fqb4">"Uneingespeicherte Änderungen"</string>
  <string name="_Program_completed_at_PC___s_ZX9J0f">"Programm beendet bei PC=$%1$s"</string>
  <string name="_6502_Stack_emptied__Wrapping____1ktNKJ">"6502 Stack leer! Unterlauf..."</string>
  <string name="_6502_Stack_filled__Wrapping____Z1uzfCT">"6502 Stack voll! Überlauf..."</string>
  <string name="_Address__s___unknown_opcode_12gkt1">"Adresse %1$s - unbekannter Opcode"</string>
  <string name="_wdm_output_Z1blUvC">"WDM-Ausgabe"</string>
  <string name="Stopped">"Angehalten"</string>
  <string name="_Unable_to_find_parse_given_address_label_Z1hcowP">"Die angegebene Adresse/Label konnte nicht gefunden oder verarbeitet werden"</string>
  <string name="_No_address_or_label_provided_17PYXP">"Keine Adresse oder Label angegeben"</string>
  <string name="_Label__label__is_already_used_as_a_symbol__please_rename_one_of_them_Zlh8tj">"Label {label} wird bereits als Symbol verwendet; bitte eines davon umbenennen"</string>
  <string name="_Label_already_defined_at_line__s___d_ZHNBwC">"Label wurde bereits in Zeile %1$d definiert: %2$s"</string>
  <string name="_Indexing_labels____Z26cBX9">"Labels werden indiziert..."</string>
  <string name="_Found__d_label__1vawu8">"%1$d Label gefunden."</string>
  <string name="_Found__d_labels__14ydwt">"%1$d Labels gefunden."</string>
  <string name="_Preprocessing_____LtJQr">"Vorverarbeitung läuft..."</string>
  <string name="_Code_assembled_successfully___d_bytes__ZUwtGV">"Code erfolgreich assembliert, %1$d Bytes."</string>
  <string name="_Out_of_range_branch_on_line__d__branches_are_limited_to__128_to__127____s_flIh9">"Sprungbefehl außerhalb des gültigen Bereichs in Zeile %1$d (Sprünge sind auf -128 bis +127 begrenzt): %2$s"</string>
  <string name="_Syntax_error_line__d___s_2jNvJ">"Syntaxfehler in Zeile %1$d: %2$s"</string>
  <string name="_No_code_to_run__1rd1Uq">"Kein Code zum Ausführen vorhanden."</string>
  <string name="_Assembling_code_____ZKs9pk">"Code wird assembliert..."</string>
  <string name="_Unable_to_relocate_code_outside_64k_memory_bFfft">"Code kann nicht außerhalb des 64k Speicherbereichs verschoben werden"</string>
  <string name="_6502_7jqx">"6502"</string>
</resources>
